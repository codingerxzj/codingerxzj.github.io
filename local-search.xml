<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux基础</title>
    <link href="/2025/06/17/Linux%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/06/17/Linux%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Linux系统概述"><a href="#1-Linux系统概述" class="headerlink" title="1. Linux系统概述"></a>1. Linux系统概述</h1><img src="/.io//BaiduNetdiskDownload\1.笔记\images\Linux.png" style="zoom: 10%;"><p>Linux是一种开源操作系统，与Windows或macOS等操作系统不同，Linux允许用户自由地查看、修改和分发其源代码。以下是Linux系统的一些显著的优势。</p><ul><li><p><strong>稳定性和可靠性</strong>：</p><p>Linux内核以其稳定性而闻名，能够持续运行数月甚至数年而不需要重新启动。这对于服务器来说至关重要，因为它们需要保持长时间的稳定运行，以提供持续的服务。</p></li><li><p><strong>安全性</strong>：</p><p>Linux系统的安全性得到了广泛认可。开源的自然属性使得漏洞可以很快被发现和修复，从而降低了受到安全威胁的风险。</p></li><li><p><strong>资源利用效率</strong>：</p><p>Linux在资源管理方面表现出色，可以高效地利用服务器硬件资源，使得服务器能够同时处理大量的请求。</p></li><li><p><strong>开源和免费</strong>.</p><p>Linux是开源的，因此不需要为操作系统本身付费。这使得它在经济上具有明显的优势，特别是对于企业或组织需要部署大量服务器的情况。</p></li></ul><p>由于上述的这些优势，Linux系统成为了许多企业和组织首选的服务器操作系统。</p><h1 id="2-安装Linux虚拟机"><a href="#2-安装Linux虚拟机" class="headerlink" title="2. 安装Linux虚拟机"></a>2. 安装Linux虚拟机</h1><h2 id="2-1-安装VMware"><a href="#2-1-安装VMware" class="headerlink" title="2.1 安装VMware"></a>2.1 安装VMware</h2><p>常见的虚拟机软件有VMware、Virtual Box等，本课程使用VMware。</p><ol><li><p>双击<code>VMware-workstation-full-17.0.0-20800274.exe</code>安装包，启动安装向导，并点击<code>下一步</code>。</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\VMware安装向导.png" style="zoom:80%;"></li><li><p>查看用户许可协议，勾选接收并点击<code>下一步</code>。</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\VMware用户协议.png" style="zoom:80%;"></li><li><p>选择安装路径，并点击<code>下一步</code></p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\VMware选择安装位置.png" style="zoom:80%;"></li><li><p>用户体验设置，建议取消勾选，并点击<code>下一步</code></p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\VMware用户体验设置.png" style="zoom:80%;"></li><li><p>创建快捷方式，建议勾选，并点击<code>下一步</code></p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\快捷方式.png" style="zoom:80%;"></li><li><p>点击<code>安装</code>，开始进行安装。</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\VMware完成安装.png" style="zoom:80%;"></li><li><p>等待完成安装</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\VMware等待安装.png" style="zoom:80%;"></li><li><p>点击<code>完成</code>，结束向导</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\VMWare完整安装.png" style="zoom:80%;"></li><li><p>启动VMware，可填入许可秘钥进行激活，或者选择30天试用。</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\VMware试用和激活.png" style="zoom:80%;"></li></ol><h2 id="2-2-安装虚拟机"><a href="#2-2-安装虚拟机" class="headerlink" title="2.2 安装虚拟机"></a>2.2 安装虚拟机</h2><ol><li><p>点击<code>创建新的虚拟机</code>， 启动向导</p><p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\创建虚拟机.png"></p></li><li><p>选择典型向导，并点击<code>下一步</code></p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\选择典型向导.png" style="zoom:80%;"></li><li><p>选择稍后安装操作系统，并点击<code>下一步</code></p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\选择稍后安装操作系统.png" style="zoom:80%;"></li><li><p>选择操作系统类型，分别选择<code>Linux</code>和<code>Centos 7 64 位</code>，并点击<code>下一步</code></p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\选择操作系统类型.png" style="zoom:80%;"></li><li><p>为虚拟机命令并选择安装目录，完成后点击<code>下一步</code></p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\选择虚拟机安装目录.png" style="zoom:80%;"></li><li><p>设置磁盘大小，建议<code>40G</code>，完成后点击<code>下一步</code></p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\设置磁盘大小.png" style="zoom:80%;"></li><li><p>点击<code>自定义硬件</code></p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\自定义硬件.png" style="zoom:80%;"></li><li><p>自定义虚拟机内存大小，推荐<code>4G</code></p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\自定义内存.png" style="zoom:80%;"></li><li><p>自定义虚拟机处理器，推荐1个处理器2个核心</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\自定义处理器.png" style="zoom:80%;"></li><li><p>自定义网络模式，暂时选择<code>桥接模式</code></p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\自定义网络模式.png" style="zoom:80%;"></li></ol><h2 id="2-3-安装Centos7系统"><a href="#2-3-安装Centos7系统" class="headerlink" title="2.3 安装Centos7系统"></a>2.3 安装Centos7系统</h2><p>Linux系统拥有众多的发行版，其中Centos是最常用于服务器的发行版之一，除此之外，还有Ubuntu、Debian等等。</p><blockquote><p>Linux发行版是指在相同的Linux内核的基础上，增加不同的系统工具和应用程序等，从而构成的一个完整的操作系统。</p></blockquote><ol><li><p>下载Centos系统镜像</p><p>IOS镜像的下载地址为：</p><ul><li><p>官网：<a href="https://www.centos.org/download/">https://www.centos.org/download/</a></p></li><li><p>国内镜像：<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/">http://mirrors.aliyun.com/centos/7/isos/x86_64/</a></p></li></ul></li><li><p>安装系统镜像，选择<code>CD/DVD</code>模式</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\安装系统镜像.png" style="zoom:80%;"></li><li><p>选择ISO镜像，并指定<code>CentOS-7-x86_64-DVD-2009.iso</code>镜像所在路径，完成后点击<code>确定</code></p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\选择IOS镜像路径.png" style="zoom:80%;"></li><li><p>开启虚拟机，开始安装系统</p><p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\开启虚拟机.png"></p></li><li><p>鼠标点击虚拟机屏幕，进入虚拟机（如需返回主机系统，同时按住<code>Ctrl</code>和<code>Alt</code>键），使用上下前切换安装选项，选中第一项<code>Install Centos 7</code>（白色为选中），然后点击回车键。</p><p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\开始安装系统.png"></p></li><li><p>等待启动安装向导</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\等待启动向导.png" style="zoom:80%;"></li><li><p>向导启动成功后，界面如下图所示</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\安装向导已启动.png" style="zoom:80%;"></li><li><p>选择系统语言，推荐<code>中文</code>，完成后点击<code>继续</code></p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\选择系统语言.png" style="zoom:80%;"></li><li><p>选择系统时区，要求选择<code>亚洲/上海</code>。</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\选择时区.png" style="zoom:80%;"></li><li><p>选择预置软件，推荐选择<code>Gnome</code></p></li></ol>   <img src="/.io//BaiduNetdiskDownload\1.笔记\images\软件选择.png" style="zoom:80%;"><ol start="11"><li><p>选择系统安装位置，推荐使用自动配置分区</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\安装位置.png" style="zoom:80%;"></li><li><p>关闭KDUMP，已节省资源</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\关闭KDUMP.png" style="zoom:80%;"></li><li><p>上述内容设置完毕后，点击开始安装</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\开始安装.png" style="zoom:80%;"></li><li><p>设置root用户密码</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\设置root用户密码.png" style="zoom:80%;"></li><li><p>创建普通用户</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\创建普通用户.png" style="zoom:80%;"></li><li><p>等待系统安装完成</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\等待系统安装.png" style="zoom:80%;"></li><li><p>安装完成后，重启系统</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\重启操作系统.png" style="zoom:80%;"></li><li><p>重启后，同意许可协议</p><p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\我同意协议.png"></p></li><li><p>连接网络</p><p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\连接网络.png"></p><p><strong>注意：</strong></p><p>若网络连接不成功，可按照以下步骤解决。</p><ul><li><p>检查主机是否联网，因为桥接模式下，虚拟机直接连接到主机所连接的网络。</p></li><li><p>配置虚拟网络编辑器</p><ul><li><p>打开虚拟网络编辑器</p><p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\虚拟网络编辑器.png"></p></li><li><p>点击<code>更改设置</code></p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\更改设置.png" style="zoom:80%;"></li><li><p>修改桥接模式网络配置，将虚拟机桥接到主机联网所使用的网卡。</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\选择目前主机联网所使用的网卡.png" style="zoom:80%;"></li></ul></li></ul></li><li><p>完成后，点击<code>完成配置</code></p><p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\完成配置.png"></p></li></ol><h2 id="2-4-VMware使用技巧"><a href="#2-4-VMware使用技巧" class="headerlink" title="2.4 VMware使用技巧"></a>2.4 VMware使用技巧</h2><h3 id="2-4-1-系统快照"><a href="#2-4-1-系统快照" class="headerlink" title="2.4.1 系统快照"></a>2.4.1 系统快照</h3><p>所谓系统快照，就是将操作系统的当前状态保存下来，若将来系统出现不可修复的故障，便可使用快照恢复操作系统。下面演示VMware提供的快照功能。</p><ol><li><p><strong>拍摄快照</strong></p><p>找到需要拍摄的虚拟机，执行如下操作</p><p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\拍摄快照.png"></p><p>填写快照信息</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\快照名称和描述.png" style="zoom:80%;"></li><li><p><strong>误操作</strong></p><p>假如失误删除了系统的一些重要文件，导致系统无法正常运行，例如下图所示</p><p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\误操作.png"></p><p>关机后再启动，发现无法进入系统。</p></li><li><p><strong>恢复快照</strong></p><p>进入快照管理器</p><p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\快照管理器.png"></p><p>选中要恢复的快照，点击<code>转到</code>，即可将系统恢复到指定的状态。</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\恢复快照.png" style="zoom:80%;"></li><li><p><strong>删除快照</strong></p><p>若快照已经十分久远，失去其存在的意义，便可将其删除，具体操作如下图所示</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\删除快照.png" style="zoom:80%;"></li></ol><h3 id="2-4-2-克隆虚拟机"><a href="#2-4-2-克隆虚拟机" class="headerlink" title="2.4.2 克隆虚拟机"></a>2.4.2 克隆虚拟机</h3><p>顾名思义，克隆虚拟机就是将现有的虚拟机复制一份，得到一台和原有虚拟机配置完全相同的虚拟机，从而省去重复安装系统的繁琐工作。克隆虚拟机的具体操作如下</p><ol><li><p>将需要克隆的虚拟机关机</p></li><li><p>选中要克隆的虚拟机，并打开克隆向导</p><p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\打开克隆虚拟机向导.png"></p></li><li><p>选择克隆状态，可选最新状态或者快照中的历史状态</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\选择克隆状态.png" style="zoom:80%;"></li><li><p>选择克隆方式，推荐选择<code>完整克隆</code></p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\选择克隆方式.png" style="zoom:80%;"></li><li><p>填写新虚拟机的名称和安装目录，最后点击完成</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\选择克隆位置.png" style="zoom:80%;"></li></ol><h3 id="2-4-3-删除虚拟机"><a href="#2-4-3-删除虚拟机" class="headerlink" title="2.4.3 删除虚拟机"></a>2.4.3 删除虚拟机</h3><p>废弃不用的虚拟机可通过如下方式删除</p><p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\删除虚拟机.png"></p><h1 id="3-Linux文件系统目录结构"><a href="#3-Linux文件系统目录结构" class="headerlink" title="3. Linux文件系统目录结构"></a>3. Linux文件系统目录结构</h1><p>理解和熟悉Linux系统的文件系统目录结构，对于有效的管理和定位文件十分重要。Linux文件系统的目录结构如下图所示：</p><p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\Linux文件系统.drawio.png"></p><p>其中各目录的作用如下表所示</p><table><thead><tr><th>目录</th><th>说明</th><th>作用</th></tr></thead><tbody><tr><td>&#x2F;</td><td>根目录</td><td>根目录是整个文件系统的起点，所有其他目录和文件都位于根目录之下。</td></tr><tr><td>&#x2F;home</td><td>家目录</td><td>每个用户的个人目录都位于这个目录下，通常以用户名命名。例如，用户<code>john</code>的主目录路径为<code>/home/john</code>。</td></tr><tr><td>&#x2F;root</td><td>root用户的家目录</td><td>保存root用户的个人数据</td></tr><tr><td>&#x2F;boot</td><td>引导文件所在目录</td><td>保存系统启动时所需的各种文件</td></tr><tr><td>&#x2F;usr</td><td>User System Resources的简写，说法不唯一</td><td>存放用户可用的软件和程序文件，也包括了一些共享的数据和库文件。</td></tr><tr><td>&#x2F;bin</td><td>binary的简写</td><td>存放系统的基本命令（如ls、cp等）和其余可执行文件。</td></tr><tr><td>&#x2F;sbin</td><td>system binary的简写</td><td>存放系统管理和维护方面的二进制文件。</td></tr><tr><td>&#x2F;etc</td><td>etcetera的简写</td><td>存放系统的配置文件，包括各种程序的配置文件和系统的全局配置文件。</td></tr><tr><td>&#x2F;var</td><td>variable的简写</td><td>存放系统运行时产生的可变数据，如日志文件、数据库文件等。</td></tr><tr><td>&#x2F;opt</td><td>optional的简写</td><td>存放一些可选的软件包，通常由用户自行安装。</td></tr><tr><td>&#x2F;tmp</td><td>temporary的简写</td><td>存放临时文件，系统会定期清理该目录</td></tr></tbody></table><h1 id="4-Linux交互界面"><a href="#4-Linux交互界面" class="headerlink" title="4. Linux交互界面"></a>4. Linux交互界面</h1><p>服务器中Linux系统，通常不会安装图形用户界面（GUI，Graphical User Interface），因此我们与操作系统的交互主要靠命令行界面（CLI，Command Line Interface），如下图所示</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\命令行界面.png" style="zoom:80%;"><p>在命令行界面，用户通过输入一些列命令来和操作系统进行交互，例如通过<code>mkdir /test</code>来创建<code>/test</code>目录。这些命令通常由shell解释并执行。</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\Shell示意图.drawio.svg" style="zoom:50%;"><h1 id="5-Linux常用命令"><a href="#5-Linux常用命令" class="headerlink" title="5. Linux常用命令"></a>5. Linux常用命令</h1><h2 id="5-1-文件和目录相关"><a href="#5-1-文件和目录相关" class="headerlink" title="5.1 文件和目录相关"></a>5.1 文件和目录相关</h2><ol><li><p><strong>pwd（print working directory）</strong></p><ul><li><p><strong>作用</strong></p><p>打印当前目录的绝对路径</p></li></ul><ul><li><p><strong>基本语法</strong></p><p><code>pwd</code></p></li><li><p><strong>案例实操</strong></p><p>显示当前工作目录的绝对路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">[root@localhost ~]# pwd<br>/root<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>ls（list）</strong></p><ul><li><p><strong>作用</strong></p><p>列出目录内容</p></li></ul><ul><li><p><strong>基本语法</strong></p><p><code>ls [选项] [目录或是文件]</code></p></li><li><p><strong>选项说明</strong></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来</td></tr><tr><td>-l</td><td>使用较长（详细）的格式列出信息，包含文件的属性与权限等等数据</td></tr></tbody></table></li><li><p><strong>实操案例</strong></p><p>查看当前目录的所有内容信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">[atguigu@localhost ~]$ ls -al<br>总用量 44<br>drwx------. 5 atguigu atguigu 4096 5月  27 15:15 .<br>drwxr-xr-x. 3 root    root    4096 5月  27 14:03 ..<br>drwxrwxrwx. 2 root    root    4096 5月  27 14:14 hello<br>-rwxrw-r--. 1 atguigu atguigu   34 5月  27 14:20 test.txt<br>ls ./ 查看当前目录<br>man ls ：ch<br></code></pre></td></tr></table></figure></li><li><p><strong>显示说明</strong></p><p>每行列出的信息依次是： 文件类型与权限 链接数 文件属主 文件属组 文件大小 最近修改时间 文件名</p></li></ul></li><li><p><strong>cd（change directory）</strong></p><ul><li><p><strong>作用</strong></p><p>切换路径</p></li></ul><ul><li><p><strong>基本语法</strong></p><p><code>cd [参数]</code></p></li><li><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>cd 绝对路径</td><td><strong>切换路径</strong></td></tr><tr><td>cd 相对路径</td><td><strong>切换路径</strong></td></tr><tr><td>cd ~或者cd</td><td>回到自己的家目录</td></tr><tr><td>cd -</td><td>回到上一次所在目录</td></tr><tr><td>cd ..</td><td>回到当前目录的上一级目录</td></tr></tbody></table></li></ul></li><li><p>**mkdir（Make Directory） **</p><ul><li><p><strong>作用</strong></p><p>创建目录</p></li></ul><ul><li><p><strong>基本语法</strong></p><p><code>mkdir [选项] 要创建的目录</code></p></li><li><p><strong>选项说明</strong></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-p</td><td>创建多层目录</td></tr></tbody></table></li><li><p><strong>实操案例</strong></p><ul><li>创建一个目录</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">[root@localhost ~]# mkdir hello<br><br>[root@localhost ~]# mkdir hello/world<br></code></pre></td></tr></table></figure><ul><li>创建一个多级目录</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">[root@localhost ~]# mkdir -p big/world<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>cp（copy）</strong></p><ul><li><p><strong>作用</strong></p><p>复制文件或目录</p></li></ul><ul><li><p><strong>基本语法</strong></p><p><code>cp [选项] source dest</code></p></li><li><p><strong>选项说明</strong></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>递归复制整个文件夹</td></tr></tbody></table></li><li><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>source</td><td>源文件</td></tr><tr><td>dest</td><td>目标文件</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>复制文件</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">[root@localhost ~]# cp ./initial-setup-ks.cfg ./hello<br></code></pre></td></tr></table></figure><ul><li>递归复制整个文件夹</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">[root@localhost ~]# cp -r ./big ./hello<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>rm（remove）</strong></p><ul><li><p><strong>作用</strong></p><p>移除文件或者目录</p></li></ul><ul><li><p><strong>基本语法</strong></p><p><code>rm [选项] deleteFile</code></p></li><li><p><strong>选项说明</strong></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>递归删除目录所有内容</td></tr><tr><td>-f</td><td>强制删除,不提示用户进行确认</td></tr></tbody></table></li><li><p><strong>实操案例</strong></p><ul><li>递归删除目录中所有内容</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">[root@localhost ~]# rm -rf ./big<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>mv（move）</strong></p><ul><li><p><strong>作用</strong></p><p>移动或重命名文件</p></li></ul><ul><li><p><strong>基本语法</strong></p><ul><li><p>移动文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">mv 源文件 目标目录<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>重命名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> 源文件 目标文件<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>案例实操</strong></p><ul><li><p>移动文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">[root@localhost ~]# cd hello/<br>[root@localhost hello]# mv initial-setup-ks.cfg world/<br></code></pre></td></tr></table></figure></li><li><p>移动文件并重命名</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> world]<span class="hljs-meta"># mv initial-setup-ks.cfg ../hello.cfg</span><br></code></pre></td></tr></table></figure></li><li><p>重命名</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> hello]<span class="hljs-meta"># mv hello.cfg initial-setup-ks.cfg</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>cat</strong></p><ul><li><p><strong>作用</strong></p><p>查看文件内容</p></li></ul><ul><li><p><strong>基本语法</strong></p><p><code>cat  [选项] 文件</code></p></li><li><p><strong>选项说明</strong></p><table><thead><tr><th>选项</th><th>功能描述</th></tr></thead><tbody><tr><td>- n</td><td>显示所有行的行号,包括空行</td></tr></tbody></table></li><li><p><strong>实操案例</strong></p><p>查看文件内容并显示行号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">[atguigu@localhost ~]$ cat -n hello.cfg<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>tail</strong> </p><ul><li><p><strong>作用</strong></p><p>输出文件尾部内容</p></li></ul><ul><li><p><strong>基本语法</strong></p><ul><li><code>tail 文件</code>（功能描述：查看文件后10行内容）</li><li><code>tail -n 5 文件</code>（功能描述：查看文件后5行内容，5可以是任意行数）</li><li><code>tail -f 文件</code>（功能描述：实时追踪该文档的所有更新）</li></ul></li><li><p><strong>选项说明</strong></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-n&lt;行数&gt;</td><td>输出文件尾部n行内容</td></tr><tr><td>-f</td><td>显示文件最新追加的内容，监视文件变化</td></tr></tbody></table></li><li><p><strong>实操案例</strong></p><ul><li>查看文件最后50行内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">[root@localhost ~]# tail -n 50 helle.cfg<br></code></pre></td></tr></table></figure><ul><li>实时追踪该档的所有更新</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">[root@localhost ~]# tail -f hello.cfg<br>ctrl + c ：进行命令中断<br></code></pre></td></tr></table></figure></li></ul></li></ol><h2 id="5-2-文本编辑相关"><a href="#5-2-文本编辑相关" class="headerlink" title="5.2 文本编辑相关"></a>5.2 文本编辑相关</h2><p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\vim.png"></p><p>在命令行界面下，最常用的文本编辑器就是<strong>Vi&#x2F;Vim</strong>。其中<strong>Vi</strong> 是 Linux操作系统中最通用的文本编辑器。 <strong>Vim</strong>编辑器是<strong>Vi</strong>的增强版，相较于<strong>Vi</strong>，提供了代码高亮等功能。两者用法完全兼容。下面介绍<strong>Vim</strong>的用法。</p><ul><li><p><strong>基础语法</strong></p><p><code>vim 文件</code> </p></li><li><p><strong>Vim模式介绍</strong></p><p>Vim文编辑器有不同的工作模式，在不同模式下，可执行不同的操作，主要模式有</p><ul><li><strong>普通模式（Normal Mode）</strong>：用于删除、复制、粘贴等基本操作。</li><li><strong>编辑模式（Insert Mode）</strong>：用于编辑文本。</li><li><strong>命令行模式（Command Mode）</strong>：用于执行命令，如保存、退出等。</li></ul><p>下图为各模式之间的切换方法</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\Vim模式介绍.drawio.svg" style="zoom: 50%;"></li></ul><p>下面分别介绍各模式下的用法</p><ul><li><p><strong>编辑模式</strong></p><p>编辑模式下，可进行正常的编辑操作，可在编辑模式下和其他模式下灵活切换，提高编辑效率。</p></li><li><p><strong>一般模式</strong></p><p>在这个模式中， 可以使用上下左右按键来移动光标，也开通过一些简单的操作来复制粘贴以及删除文本，具体操作如下</p><ul><li><p>光标操作</p><table><thead><tr><th>快捷键</th><th>操作</th></tr></thead><tbody><tr><td><code>shift+6(^)</code></td><td>移动到行头</td></tr><tr><td><code>shift+4($)</code></td><td>移动到行尾</td></tr><tr><td><code>shift+g</code></td><td>移动到页尾</td></tr><tr><td><code>gg</code></td><td>移动到页头</td></tr></tbody></table></li><li><p>复制粘贴操作</p><table><thead><tr><th>快捷键</th><th>操作</th></tr></thead><tbody><tr><td><code>yy</code></td><td>复制光标当前行</td></tr><tr><td><code>yw</code></td><td>复制光标当前词</td></tr><tr><td><code>p</code></td><td>粘贴</td></tr></tbody></table></li><li><p>删除操作</p><table><thead><tr><th>快捷键</th><th>操作</th></tr></thead><tbody><tr><td><code>dd</code></td><td>删除光标当前行</td></tr><tr><td><code>d n d</code></td><td>删除当前光标所处行及其以下共n行</td></tr><tr><td><code>x</code></td><td>删除当前光标处的一个字符</td></tr></tbody></table></li></ul></li><li><p><strong>命令模式</strong></p><p>命令模式下可通过一些命令实现存盘、退出、显示行号、搜索、批量替换等功能，具体命令如下</p><table><thead><tr><th>命令</th><th>操作</th></tr></thead><tbody><tr><td><code>:w</code></td><td>保存</td></tr><tr><td><code>:q</code></td><td>退出</td></tr><tr><td><code>:!</code></td><td>强制执行</td></tr><tr><td><code>:set nu</code></td><td>显示行号</td></tr><tr><td><code>:set nonu</code></td><td>取消行号</td></tr><tr><td><code>/文本</code></td><td>搜索文本，输入n：光标指向下一个，输入N：贯标指向上一个</td></tr><tr><td><code>:nohl</code></td><td>搜索文本后，匹配内容会高亮显示，该命令可取消高亮</td></tr><tr><td><code>:s/old/new/g</code></td><td>在全局范围内使用new替换old内容</td></tr></tbody></table></li></ul><h2 id="5-3-文件权限相关"><a href="#5-3-文件权限相关" class="headerlink" title="5.3 文件权限相关"></a>5.3 文件权限相关</h2><h3 id="5-3-1-文件权限概述"><a href="#5-3-1-文件权限概述" class="headerlink" title="5.3.1 文件权限概述"></a>5.3.1 文件权限概述</h3><p>Linux中的所有文件均有严格的访问权限控制，只有当用户拥有某个文件的相关权限时，才可对文件执行相关操作。</p><p><strong>权限系统相关概念</strong></p><ul><li><p><strong>用户和用户组</strong></p><p>在Linux系统中注册的个体称为一个<strong>用户</strong>，例如root和atguigu，除此之外还能使用<code>useradd &lt;用户名&gt;</code>命令创建新的用户。每个用户都可以属于一个或多个<strong>用户组</strong>，可以使用<code>groups &lt;用户名&gt;</code>命令查看用户所属的组，使用<code>usermod -g &lt;新组名&gt; &lt;用户名&gt;</code>修改用户所属组。</p><p>每个文件或者目录都有一个所属用户和一个所属组。</p></li><li><p><strong>文件权限</strong></p><p>在Linux中，文件和目录的权限主要分为三个部分：读（read）、写（write）和执行（execute）。</p><ul><li><strong>读权限</strong>，表示可以读取文件的内容或者查看目录的内容。</li><li><strong>写权限</strong>，表示可以修改文件内容或者在目录中创建、删除文件。</li><li><strong>执行权限</strong>，表示可以运行可执行文件或者进入目录。</li></ul></li><li><p><strong>权限字符串</strong>：</p><p>在Linux系统中，文件和目录的权限用一组字符来表示，通常以<code>rwxr-xr--</code>的形式呈现，其中<code>r</code>、<code>w</code>、<code>x</code>分别表示读、写和执行权限。以下是权限字符的含义：</p><ul><li><p>第1-3位确定属主（该文件的所有者）拥有该文件的权限。</p></li><li><p>第4-6位确定属组（所有者的同组用户）拥有该文件的权限。</p></li><li><p>第7-9位确定其他用户拥有该文件的权限。</p></li></ul></li></ul><p><strong>思考题</strong></p><p>若某文件的权限字符串为<code>rwxr-xr--</code>，请分析该文件的权限策略。</p><h3 id="5-3-2-常用命令"><a href="#5-3-2-常用命令" class="headerlink" title="5.3.2 常用命令"></a>5.3.2 常用命令</h3><ol><li><p><strong>chmod（change mode）</strong></p><ul><li><p><strong>作用</strong></p><p>修改文件或目录权限</p></li><li><p><strong>基本语法</strong></p><ul><li><p><code>chmod [选项] [u/g/o/a][+/-/=][r/w/x] 文件或目录</code></p><ul><li>u：user</li><li>g：group</li><li>o：other</li><li>a：all</li></ul></li><li><p><code>chmod [选项] 777 文件或目录</code></p><table><thead><tr><th>权限表示法</th><th>user</th><th>group</th><th>other</th></tr></thead><tbody><tr><td>字符串</td><td>rwx</td><td>r-x</td><td>rw-</td></tr><tr><td>数字（二进制）</td><td>111</td><td>101</td><td>110</td></tr><tr><td>数字（八进制）</td><td>7</td><td>5</td><td>6</td></tr></tbody></table></li></ul></li><li><p><strong>选项说明</strong></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-R</td><td>递归操作</td></tr></tbody></table><ul><li><p><strong>实操案例</strong></p><ul><li>修改文件使其所属主用户具有执行权限</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">[root@localhost ~]# chmod u+x hello.cfg<br></code></pre></td></tr></table></figure><ul><li>修改文件使其所属组用户具有执行权限</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">[root@localhost ~]# chmod g+x hello.cfg<br></code></pre></td></tr></table></figure><ul><li>修改文件所属主用户执行权限,并使其他用户具有执行权限</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">[root@localhost ~]# chmod u-x,o+x hello.cfg<br></code></pre></td></tr></table></figure><ul><li>采用数字的方式，设置文件所有者、所属组、其他用户都具有可读可写可执行权限。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">[root@localhost ~]# chmod 777 hello.txt<br></code></pre></td></tr></table></figure><ul><li>修改整个文件夹里面的所有文件的所有者、所属组、其他用户都具有可读写执行权限。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">[root@localhost ~]# chmod -R 777 hello/<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>chown（change owner）</strong></p><ul><li><p><strong>作用</strong></p><p>改变文件或目录所有者</p></li></ul><ul><li><p><strong>基本语法</strong></p><p><code>chown [选项] 用户[:用户组] 文件或目录</code></p><ul><li><p><strong>选项说明</strong></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-R</td><td>递归操作</td></tr></tbody></table></li><li><p><strong>实操案例</strong></p><ul><li>修改文件所有者</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">[root@localhost ~]# chown atguigu helle.cfg <br></code></pre></td></tr></table></figure><ul><li>递归改变文件所有者和所有组</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">[root@localhost ~]# chown -R atguigu:atguigu hello/<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h2 id="5-4-进程管理相关"><a href="#5-4-进程管理相关" class="headerlink" title="5.4 进程管理相关"></a>5.4 进程管理相关</h2><p>操作系统中正在运行的一个程序称为一个进程。</p><ul><li><p><strong>查看进程</strong></p><p>可以使用<code>ps</code>（process status）命令查看操作系统中当前的进程。</p><ul><li><p><strong>常见用法</strong></p><ul><li><p><strong><code>ps aux</code></strong></p><p>选项说明如下</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>a</td><td>显示所有前台进程</td></tr><tr><td>u</td><td>以用户友好的方式打印进程信息</td></tr><tr><td>x</td><td>显示后台进程</td></tr></tbody></table><p><code>ps aux</code>显示内容如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">USER</span>        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND<br><span class="hljs-attribute">root</span>          <span class="hljs-number">1</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">1</span> <span class="hljs-number">193964</span>  <span class="hljs-number">7048</span> ?        Ss   <span class="hljs-number">08</span>:<span class="hljs-number">56</span>   <span class="hljs-number">0</span>:<span class="hljs-number">01</span> /usr/lib/systemd/systemd<br><span class="hljs-attribute">root</span>          <span class="hljs-number">2</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>      <span class="hljs-number">0</span>     <span class="hljs-number">0</span> ?        S    <span class="hljs-number">08</span>:<span class="hljs-number">56</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00</span><span class="hljs-meta"> [kthreadd]</span><br><span class="hljs-attribute">root</span>          <span class="hljs-number">4</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>      <span class="hljs-number">0</span>     <span class="hljs-number">0</span> ?        S&lt;   <span class="hljs-number">08</span>:<span class="hljs-number">56</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00</span><span class="hljs-meta"> [kworker/0:0H]</span><br><span class="hljs-attribute">root</span>          <span class="hljs-number">5</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>      <span class="hljs-number">0</span>     <span class="hljs-number">0</span> ?        S    <span class="hljs-number">08</span>:<span class="hljs-number">56</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00</span><span class="hljs-meta"> [kworker/u256:0]</span><br></code></pre></td></tr></table></figure><p>注：</p><ul><li><strong>USER</strong>：启动该进程的用户</li><li><strong>PID</strong>：进程ID</li><li><strong>%CPU</strong>：该进程占用CPU资源的百分比</li><li><strong>%MEM</strong>：该进程占用物理内存的百分比</li><li><strong>COMMAND</strong>：产生此进程的命令名</li></ul></li><li><p><strong><code>ps -ef</code></strong></p><p>选项说明如下</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-e</td><td>显示所有进程</td></tr><tr><td>-f</td><td>以完整的格式显示进程的详细信息</td></tr></tbody></table><p><code>ps -ef</code>显示内容如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">UID</span>         PID   PPID  C STIME TTY          TIME CMD<br><span class="hljs-attribute">root</span>          <span class="hljs-number">1</span>      <span class="hljs-number">0</span>  <span class="hljs-number">0</span> <span class="hljs-number">08</span>:<span class="hljs-number">56</span> ?        <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">01</span> /usr/lib/systemd/systemd <br><span class="hljs-attribute">root</span>          <span class="hljs-number">2</span>      <span class="hljs-number">0</span>  <span class="hljs-number">0</span> <span class="hljs-number">08</span>:<span class="hljs-number">56</span> ?        <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><span class="hljs-meta"> [kthreadd]</span><br><span class="hljs-attribute">root</span>          <span class="hljs-number">4</span>      <span class="hljs-number">2</span>  <span class="hljs-number">0</span> <span class="hljs-number">08</span>:<span class="hljs-number">56</span> ?        <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><span class="hljs-meta"> [kworker/0:0H]</span><br><span class="hljs-attribute">root</span>          <span class="hljs-number">5</span>      <span class="hljs-number">2</span>  <span class="hljs-number">0</span> <span class="hljs-number">08</span>:<span class="hljs-number">56</span> ?        <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><span class="hljs-meta"> [kworker/u256:0]</span><br><span class="hljs-attribute">root</span>          <span class="hljs-number">6</span>      <span class="hljs-number">2</span>  <span class="hljs-number">0</span> <span class="hljs-number">08</span>:<span class="hljs-number">56</span> ?        <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><span class="hljs-meta"> [ksoftirqd/0]</span><br><span class="hljs-attribute">root</span>          <span class="hljs-number">7</span>      <span class="hljs-number">2</span>  <span class="hljs-number">0</span> <span class="hljs-number">08</span>:<span class="hljs-number">56</span> ?        <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><span class="hljs-meta"> [migration/0]</span><br></code></pre></td></tr></table></figure><p>注：</p><ul><li><strong>UID</strong>：用户ID </li><li><strong>PID</strong>：进程ID </li><li><strong>PPID</strong>：父进程ID </li><li><strong>CMD</strong>：启动进程所用的命令和参数</li></ul></li></ul></li><li><p><strong>使用技巧</strong></p><p>日常查看进程时，通常会将上述命令与<code>grep</code>命令配合使用，<code>grep</code>可用于过滤文本行。</p><p>例如想查看所有的Java进程，便可执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef | grep java<br></code></pre></td></tr></table></figure><p><code>|</code>符号称为管道符，其作用是将前边命令的输出作为下一命令的输入。</p></li></ul></li><li><p><strong>终止进程</strong></p><p>若想停止进程，可使用<code>kill</code>命令，其用法如下</p><ul><li><p>基本语法</p><p><code>kill [选项] 进程号</code></p></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-9</td><td>表示强迫进程立即停止</td></tr></tbody></table></li><li><p>案例实操，启动火狐浏览器，并杀死相关进程。</p><p>提示：火狐浏览器的英文名称为firefox。</p></li></ul></li></ul><h2 id="5-6-压缩归档相关"><a href="#5-6-压缩归档相关" class="headerlink" title="5.6 压缩归档相关"></a>5.6 压缩归档相关</h2><ol><li><p><strong>zip&#x2F;unzip</strong></p><p><code>zip/unzip</code>可用于压缩和解压缩zip文件，使用方式如下</p><ul><li><p><strong>基本语法</strong></p><p><code>zip [选项] XXX.zip 文件或路径</code><br><code>unzip [选项] XXX.zip   </code> </p></li><li><p><strong>选项说明</strong></p><table><thead><tr><th>zip选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>压缩目录</td></tr></tbody></table><table><thead><tr><th>unzip选项</th><th>功能</th></tr></thead><tbody><tr><td>-d 目录</td><td>指定解压后文件的存放目录</td></tr></tbody></table></li><li><p><strong>案例实操</strong></p><ul><li><p>压缩文件</p><p>创建两个文件<code>file1.txt</code>和<code>file2.txt</code>，并将其压缩为<code>first.zip</code></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># vim file1.txt</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># vim file2.txt</span><br><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># zip first.zip file1.txt file2.txt</span><br></code></pre></td></tr></table></figure></li><li><p>压缩目录</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@lcoalhost</span> ~]<span class="hljs-meta"># zip -r hello.zip hello</span><br></code></pre></td></tr></table></figure></li><li><p>解压</p><p>创建一个<code>zip</code>目录，并将<code>first.zip</code>中的内容解压到<code>zip</code>目录</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@lcoalhost</span> ~]<span class="hljs-meta"># mkdir zip</span><br>[root<span class="hljs-symbol">@lcoalhost</span> ~]<span class="hljs-meta"># unzip first.zip -d zip/</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>tar</strong></p><p><code>tar</code>可用于对文件进行归档（打包）和压缩，使用方式如下</p><ul><li><p><strong>基本语法</strong></p><p>打包：<code>tar [选项] -c -f 包名 文件1 文件2 文件3 ...</code></p><p>解包：<code>tar [选项] -x -f 包名 -C 指定目录 </code></p></li><li><p><strong>选项说明</strong></p><table><thead><tr><th>选项</th><th>功能</th><th></th></tr></thead><tbody><tr><td>-c</td><td>打包</td><td></td></tr><tr><td>-x</td><td>解包</td><td></td></tr><tr><td>-z</td><td>打包的同时进行压缩（解包的时候进行解压）</td><td></td></tr><tr><td>-v</td><td>打包或解包时显示正在处理的文件信息</td><td></td></tr><tr><td>-f 包名</td><td>指定打包后的文件名后者要解包的文件名</td><td></td></tr><tr><td>-C 目录</td><td>解包到指定目录</td><td></td></tr></tbody></table></li><li><p><strong>案例实操</strong></p><ul><li><p>打包<code>file1.txt</code>和<code>file2.txt</code>到<code>first.tar</code></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@lcoalhost</span> ~]<span class="hljs-meta"># tar -cvf first.tar file1.txt file2.txt</span><br></code></pre></td></tr></table></figure></li><li><p>打包并压缩<code>file1.txt</code>和<code>file2.txt</code>到<code>first.tar.gz</code></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@lcoalhost</span> ~]<span class="hljs-meta"># tar -zcvf first.tar.gz file1.txt file2.txt</span><br></code></pre></td></tr></table></figure></li><li><p>解包并解压<code>first.tar.gz</code>到<code>tar</code>目录</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@lcoalhost</span> ~]<span class="hljs-meta"># mkdir tar</span><br>[root<span class="hljs-symbol">@lcoalhost</span> ~]<span class="hljs-meta"># tar -zxvf first.tar.gz -C ./tar</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h2 id="5-7-安装应用相关"><a href="#5-7-安装应用相关" class="headerlink" title="5.7 安装应用相关"></a>5.7 安装应用相关</h2><h3 id="5-7-1-RPM离线安装"><a href="#5-7-1-RPM离线安装" class="headerlink" title="5.7.1 RPM离线安装"></a>5.7.1 <strong>RPM离线安装</strong></h3><ol><li><p><strong>RPM概述</strong></p><p>RPM（RedHat Package Manager），RedHat软件包管理工具，在基于 RedHat 的 Linux 发行版中广泛使用。常见软件包如下<code>Apache-1.3.23-11.i386.rpm</code>，类似于Windows系统中的<code>exe</code>文件。</p></li><li><p><strong>rpm命令</strong></p><p>可以使用<code>rpm</code>命令安装、卸载和查看系统中的应用，具体用法如下</p><ul><li><p><strong>安装</strong></p><ul><li><p>基本语法</p><p><code>rpm -ivh 软件包路径</code></p></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-i</td><td>-i&#x3D;install，安装</td></tr><tr><td>-v</td><td>-v&#x3D;verbose，显示详细信息</td></tr><tr><td>-h</td><td>-h&#x3D;hash，进度条</td></tr></tbody></table></li><li><p>案例实操</p><p>在以下地址下载一个<em><strong>sl软件</strong></em>的rpm安装包，并安装</p><p>下载地址：<a href="https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/s/sl-5.02-1.el7.x86_64.rpm">https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/s/sl-5.02-1.el7.x86_64.rpm</a></p></li></ul></li><li><p><strong>查看</strong></p><ul><li><p>基本语法</p><p><code>rpm -qa</code>（功能描述：查询所安装的所有rpm软件包）</p></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-q</td><td>查询模式</td></tr><tr><td>-a</td><td>表示所有</td></tr></tbody></table></li><li><p>案例实操</p><p>查询刚刚安装的软件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@localhost ~]# rpm -<span class="hljs-keyword">qa</span> | <span class="hljs-keyword">grep</span> <span class="hljs-keyword">sl</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>卸载</strong></p><ul><li><p>基本语法</p><p><code>rpm -e 软件包名 </code></p></li><li><p>案例实操</p><p>卸载刚刚安装的sl软件</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># rpm -e sl-5.02-1.el7.x86_64</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h3 id="5-7-2-Yum在线安装"><a href="#5-7-2-Yum在线安装" class="headerlink" title="5.7.2 Yum在线安装"></a>5.7.2 <strong>Yum在线安装</strong></h3><ol><li><p><strong>Yum概述</strong></p><p>YUM（全称为 Yellowdog Updater Modified）是一个Linux软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，并且可以<strong>自动处理依赖关系</strong>，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装，该功能类似在JAVA中使用Maven工具从远程仓库中下载依赖一样,可以自动处理依赖关系。</p></li><li><p><strong>yum命令</strong></p><p>可以使用yum安装和卸载应用，具体用法如下</p><ul><li><p><strong>安装软件包</strong></p><ul><li><p>基本语法</p><p><code>yum [选项] install 软件包名</code></p></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-y</td><td>对所有提问都回答“yes”</td></tr></tbody></table></li><li><p>案例实操</p><p>使用yum在线安装<em><strong>sl</strong></em>软件</p><ul><li><p>查询sl软件的包名</p><p>可在如下网站搜索Linux中的各种软件包，地址为<a href="https://pkgs.org/%EF%BC%8C%E6%90%9C%E7%B4%A2sl%EF%BC%8C%E5%B9%B6%E6%9F%A5%E7%9C%8B%E5%AF%B9%E5%BA%94%E7%9A%84Linux%E5%8F%91%E8%A1%8C%E7%89%88%EF%BC%8C%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E4%B8%BA%60yum">https://pkgs.org/，搜索sl，并查看对应的Linux发行版，搜索结果为`yum</a> install sl&#96;。</p></li><li><p>执行yum安装命令</p><p>执行<code>yum install sl</code>后的结果为</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">没有可用软件包 <span class="hljs-built_in">sl</span>。<br>错误：无须任何处理<br></code></pre></td></tr></table></figure><p>原因分析，yum的工作原理是从我们所配置的远程仓库下载rpm包，然后进行安装，远程仓库的配置文件位于<code>/etc/yum.repo.d/</code>目录中。上述问题的原因就是sl软件的rpm包不在系统预先配置的这些远程仓库中。因此需要先配置sl所在的远程仓库，才可使用yum进行安装，具体操作如下。</p></li><li><p>配置远程仓库</p><p>远程仓库可手动配置，也可在线配置，下面在线配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">[root@localhost ~]# yum -y install epel-release <br></code></pre></td></tr></table></figure><p>完成后观察<code>/etc/yum.repo.d/</code>目录下配置文件的变化。</p></li><li><p>重新安装sl</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># yum -y install sl</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>卸载软件包</strong></p><ul><li><p>基本语法</p><p><code>yum remove 软件包名</code></p></li></ul></li><li><p><strong>案例实操</strong></p><p>卸载sl软件</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># yum remove sl</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><h1 id="6-Linux系统远程访问"><a href="#6-Linux系统远程访问" class="headerlink" title="6. Linux系统远程访问"></a>6. Linux系统远程访问</h1><p>多数情况下，工作时所用的服务器并不在身边，这些计算机要么位于机房，要么位于云端，因此我们不能向操作个人电脑一样操作服务器，而是需要通过远程登录的方式来操作。</p><h2 id="6-1-SSH概述"><a href="#6-1-SSH概述" class="headerlink" title="6.1 SSH概述"></a>6.1 SSH概述</h2><p>SSH（Secure Shell）使用一种网络协议，用于在计算机之间建立加密的连接，从而允许用户以安全的方式在远程的计算机中执行命令。</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\SSH.drawio.png" style="zoom:50%;"><h2 id="6-2-SSH实操"><a href="#6-2-SSH实操" class="headerlink" title="6.2 SSH实操"></a>6.2 SSH实操</h2><p>Linux系统中都会预装SSH服务，因此我们只需在自己的个人电脑安装SSH客户端，然后配置连接即可。可以选择的SSH客户端有很多，目前，比较主流的有 Xshell, SecureCRT，FinalShell，MobaXterm 等，同学们可以根据自己的习惯自行选择。本课程使用MobaXterm，下面演示具体使用方式。</p><ol><li><p>在Windows主机安装MobaXterm软件，安装包位于项目资料中。</p></li><li><p>查询虚拟机IP地址</p><p>使用<code>ifconfig</code>（network interfaces configuring）命令可查看虚拟机ip地址，其输出内容如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ens33</span>: flags=<span class="hljs-number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="hljs-number">1500</span><br>        <span class="hljs-attribute">inet</span> <span class="hljs-number">172.17.0.104</span>  netmask <span class="hljs-number">255.255.255.0</span>  broadcast <span class="hljs-number">172.17.0.255</span><br>        <span class="hljs-attribute">inet6</span> fe80::<span class="hljs-number">5</span>fdd:f01e:a4fb:<span class="hljs-number">966</span>  prefixlen <span class="hljs-number">64</span>  scopeid <span class="hljs-number">0</span>x20&lt;link&gt;<br>        <span class="hljs-attribute">ether</span> <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:fc:a3:fe  txqueuelen <span class="hljs-number">1000</span>  (Ethernet)<br>        <span class="hljs-attribute">RX</span> packets <span class="hljs-number">183030</span>  bytes <span class="hljs-number">70503744</span> (<span class="hljs-number">67</span>.<span class="hljs-number">2</span> MiB)<br>        <span class="hljs-attribute">RX</span> errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">78</span>  overruns <span class="hljs-number">0</span>  frame <span class="hljs-number">0</span><br>        <span class="hljs-attribute">TX</span> packets <span class="hljs-number">23385</span>  bytes <span class="hljs-number">1917128</span> (<span class="hljs-number">1</span>.<span class="hljs-number">8</span> MiB)<br>        <span class="hljs-attribute">TX</span> errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span> overruns <span class="hljs-number">0</span>  carrier <span class="hljs-number">0</span>  collisions <span class="hljs-number">0</span><br><br><span class="hljs-attribute">lo</span>: flags=<span class="hljs-number">73</span>&lt;UP,LOOPBACK,RUNNING&gt;  mtu <span class="hljs-number">65536</span><br>        <span class="hljs-attribute">inet</span> <span class="hljs-number">127.0.0.1</span>  netmask <span class="hljs-number">255.0.0.0</span><br>        <span class="hljs-attribute">inet6</span> ::<span class="hljs-number">1</span>  prefixlen <span class="hljs-number">128</span>  scopeid <span class="hljs-number">0</span>x10&lt;host&gt;<br>        <span class="hljs-attribute">loop</span>  txqueuelen <span class="hljs-number">1000</span>  (Local Loopback)<br>        <span class="hljs-attribute">RX</span> packets <span class="hljs-number">0</span>  bytes <span class="hljs-number">0</span> (<span class="hljs-number">0</span>.<span class="hljs-number">0</span> B)<br>        <span class="hljs-attribute">RX</span> errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span>  overruns <span class="hljs-number">0</span>  frame <span class="hljs-number">0</span><br>        <span class="hljs-attribute">TX</span> packets <span class="hljs-number">0</span>  bytes <span class="hljs-number">0</span> (<span class="hljs-number">0</span>.<span class="hljs-number">0</span> B)<br>        <span class="hljs-attribute">TX</span> errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span> overruns <span class="hljs-number">0</span>  carrier <span class="hljs-number">0</span>  collisions <span class="hljs-number">0</span><br><br><span class="hljs-attribute">virbr0</span>: flags=<span class="hljs-number">4099</span>&lt;UP,BROADCAST,MULTICAST&gt;  mtu <span class="hljs-number">1500</span><br>        <span class="hljs-attribute">inet</span> <span class="hljs-number">192.168.122.1</span>  netmask <span class="hljs-number">255.255.255.0</span>  broadcast <span class="hljs-number">192.168.122.255</span><br>        <span class="hljs-attribute">ether</span> <span class="hljs-number">52</span>:<span class="hljs-number">54</span>:<span class="hljs-number">00</span>:ea:<span class="hljs-number">8</span>a:fb  txqueuelen <span class="hljs-number">1000</span>  (Ethernet)<br>        <span class="hljs-attribute">RX</span> packets <span class="hljs-number">0</span>  bytes <span class="hljs-number">0</span> (<span class="hljs-number">0</span>.<span class="hljs-number">0</span> B)<br>        <span class="hljs-attribute">RX</span> errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span>  overruns <span class="hljs-number">0</span>  frame <span class="hljs-number">0</span><br>        <span class="hljs-attribute">TX</span> packets <span class="hljs-number">0</span>  bytes <span class="hljs-number">0</span> (<span class="hljs-number">0</span>.<span class="hljs-number">0</span> B)<br>        <span class="hljs-attribute">TX</span> errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span> overruns <span class="hljs-number">0</span>  carrier <span class="hljs-number">0</span>  collisions <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>其中<code>ens33</code>，为虚拟机的以太网络接口，此处获取的ip地址为<code>172.17.0.104</code>。</p></li><li><p>在MobaXterm中配置SSH（Secure Shell）连接</p><ul><li><p>点击Session选项</p><p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\点击Session.png"></p></li><li><p>点击SSH选项，并配置连接信息</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\填入连接信息.png" style="zoom:80%;"></li><li><p>输入root用户密码</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\输入root用户密码.png" style="zoom:80%;"></li><li><p>远程登录成功，如下图所示</p><p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\登录成功.png"></p></li></ul></li></ol><h1 id="7-虚拟机网络配置"><a href="#7-虚拟机网络配置" class="headerlink" title="7. 虚拟机网络配置"></a>7. 虚拟机网络配置</h1><h2 id="7-1-目前痛点"><a href="#7-1-目前痛点" class="headerlink" title="7.1 目前痛点"></a>7.1 目前痛点</h2><p>目前虚拟机联网方式为桥接模式，这种模式下，虚拟机通过主机的物理网卡，直接连接到主机所在的网络当中。具体效果如下图所示。</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\VMware网络配置-桥接模式效果图.drawio.png" style="zoom: 50%;"><p>这种模式下存在两个痛点</p><ol><li>主机必须连接到某个网络中，主机和虚拟机才能互通。</li><li>更换网络后，主机和虚拟机的IP地址均会发生变化，因此远程访问工具中的IP需要同步进行修改。</li></ol><p>为解决上述痛点，我们需要调整虚拟机的网络模式和配置静态IP。</p><h2 id="7-2-虚拟机网络模式"><a href="#7-2-虚拟机网络模式" class="headerlink" title="7.2 虚拟机网络模式"></a>7.2 虚拟机网络模式</h2><h3 id="7-2-1-主机网络环境"><a href="#7-2-1-主机网络环境" class="headerlink" title="7.2.1 主机网络环境"></a>7.2.1 主机网络环境</h3><p>为理解VMware中的虚拟网络模式，我们首先需要明确主机所处的真实网络环境，其所处环境如下图所示：</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\VMware网络配置-物理网络拓扑.drawio.png" style="zoom:50%;"><p>如上图所示，路由器一端（WAN口，Wide Area Network）连接互联网，另一端（Local Area Network，LAN）连接多个设备，这些设备组成一个局域网，局域网中的设备都通过路由器访问互联网，这个场景应该是大家十分熟悉的。下面为大家介绍路由器中的两个十分重要的角色。</p><ul><li><p><strong>DHCP</strong></p><p>全称<strong>Dynamic Host Configuration Protocol</strong> ，动态主机配置协议，该协议用于给联网的设备自动分配（私网）IP地址和其他网络配置。家用路由器中一般就会集成DHCP服务，因此设备只要连接上路由器，便能自动获取IP地址等网络配置。</p></li><li><p><strong>NAT</strong></p><p>全称<strong>Network Address Translation</strong>，网络地址转换，该技术主要用于缓解IPv4地址短缺，有了NAT之后，可以令多个网络设备共享一个公网IP地址，家庭路由器中也都集成了该服务。</p><p>其工作原理是，NAT设备（路由器）一端连接互联网，其具有一个公网IP，另一端连接一个局域网，局域网中的每个设备均只有一个私网IP。当局域网中的设备经过路由器向互联网中的其他设备发送数据时，NAT服务会将数据包的源地址由该设备的私网IP替换为路由器的公网IP，因此互联网中的其他设备看到源地址为路由器的公网IP，所以其返回数据时，就会把路由器的公网IP设置为目标地址，路由器接收到数据之后，NAT设备再将数据的目标地址由路由器的公网IP改为原设备的私网IP，最终数据就能返回到该设备了。具体流程如下图所示</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\NAT设备工作原理.drawio.png" style="zoom:50%;"></li></ul><p>在对我们的主机所处的网络环境有了一个了解后，下面分别为大家介绍VMware中的三种网络模式。</p><h3 id="7-2-2-桥接模式"><a href="#7-2-2-桥接模式" class="headerlink" title="7.2.2 桥接模式"></a>7.2.2 桥接模式</h3><p>桥接模式的原理如下图所示</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\VMware网络配置-桥接模式.drawio.png" style="zoom:50%;"><p>这种模式下，VMware虚拟出了一个交换机。首先，该虚拟交换机通过主机的物理网卡连接到主机所在的网络中，然后所有的虚拟机都通过虚拟交换机接入到主机所在网络中。所以在该模式下，虚拟机和主机位于同一网络中，因此在主机接入网络的前提下，虚拟机和物理机是可以互通的。</p><h3 id="7-2-3-NAT模式"><a href="#7-2-3-NAT模式" class="headerlink" title="7.2.3 NAT模式"></a>7.2.3 NAT模式</h3><p>NAT模式的原理如下图所示</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\VMware网络配置-NAT模式.drawio.png" style="zoom:50%;"><p>这种模式下，VMware虚拟出了一个交换机，一个DHCP服务以及一个NAT服务，相当于构成了一个虚拟路由器。虚拟路由器通过主机的物理网卡连接到主机所在的网络，虚拟机则全部连接到虚拟路由器上，组成了一个子网。此时所有的虚拟机位于同一网络，因此彼此之间可以互通，但是主机不能与虚拟机互通。</p><p>为使主机能够和虚拟机互通，VMware又在主机中虚拟出了一个网卡，并连接到了这个虚拟路由器中，这时主机便可虚拟机互通了。</p><h3 id="7-2-4-仅主机模式"><a href="#7-2-4-仅主机模式" class="headerlink" title="7.2.4 仅主机模式"></a>7.2.4 仅主机模式</h3><p>仅主机模式的原理如下图所示</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\VMware网络配置-仅主机模式.drawio.png" style="zoom:50%;"><p>这种模式，和NAT模式十分相似，唯一的区别是，虚拟路由器并未连接到主机所在的网络中，因此主机和虚拟机之间可以互通，但是虚拟机不能访问互联网。</p><h3 id="7-2-5-网络模式选择"><a href="#7-2-5-网络模式选择" class="headerlink" title="7.2.5 网络模式选择"></a>7.2.5 网络模式选择</h3><p>为保证主机未联网的情况下，主机和虚拟机也能实现互通；同时保证主机联网的情况下虚拟机也能访问互联网，我们最好选择上述三种模式中的NAT模式，具体配置如下。</p><h4 id="7-2-5-1-VMware虚拟网络配置"><a href="#7-2-5-1-VMware虚拟网络配置" class="headerlink" title="7.2.5.1 VMware虚拟网络配置"></a>7.2.5.1 VMware虚拟网络配置</h4><ol><li><p>点击VMware菜单栏中的<code>编辑</code>，选择<code>虚拟网络编辑器</code></p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\VMware虚拟网络编辑.png" style="zoom:80%;"></li><li><p>打开虚拟网络编辑器后，赋予管理员权限</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\VMware虚拟网络编辑-管理员权限.png" style="zoom:80%;"></li><li><p>配置VMnet8子网</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\VMware虚拟网络编辑-子网配置.png" style="zoom:80%;"></li><li><p>打开NAT配置界面</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\VMware虚拟网络编辑-NAT.png" style="zoom:80%;"></li><li><p>修改NAT配置</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\VMware虚拟网络编辑-NAT网关配置.png" style="zoom:80%;"><p><strong>注意事项</strong></p><p>NAT网关IP须位于VMnet8子网IP范围内。</p></li></ol><h4 id="7-2-5-3-虚拟机选择网络模式"><a href="#7-2-5-3-虚拟机选择网络模式" class="headerlink" title="7.2.5.3 虚拟机选择网络模式"></a>7.2.5.3 虚拟机选择网络模式</h4><ol><li><p>修改虚拟机所使用的网络模式</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\虚拟机选择网络模式.png" style="zoom:80%;"></li><li><p>选择NAT模式</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\虚拟机选择网络模式-NAT.png" style="zoom:80%;"></li></ol><h4 id="7-2-5-2-Windows主机网络配置"><a href="#7-2-5-2-Windows主机网络配置" class="headerlink" title="7.2.5.2 Windows主机网络配置"></a>7.2.5.2 Windows主机网络配置</h4><p>上述配置中，VMware已将Windows主机连接到虚拟网络中了，此处只需查看Windows主机中的虚拟网络网卡配置是否正确即可。</p><ol><li><p>打开网络适配器配置面板</p><p><code>Win+R</code>打开运行窗口，输入<code>ncpa.cpl</code>，然后按回车键</p></li><li><p>查看VMnet8虚拟网络适配器</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\Windows主机网络适配器.png" style="zoom:80%;"></li><li><p>查看IpV4配置</p><img src="/.io//BaiduNetdiskDownload\1.笔记\images\Windows主机网络适配器-IP配置.png" style="zoom:80%;"><p><strong>注意事项</strong></p><p>主机IP须位于VMnet8子网IP范围内。</p></li></ol><h2 id="7-3-配置静态IP"><a href="#7-3-配置静态IP" class="headerlink" title="7.3 配置静态IP"></a>7.3 配置静态IP</h2><p>NAT模式下，虚拟机的IP地址，默认情况下是由虚拟DHCP服务自动分配的，虚拟机的IP地址不固定，这对于SSH远程访问也不友好，所以通常情况下，我们不使用虚拟DHCP服务，而是手动为虚拟机配置静态的IP地址。具体操作如下。</p><ol><li><p>确定网络配置文件</p><p>在终端输入如下命令<code>ifconfig</code>命令，查看当前的网络接口，内容如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ens33</span>: flags=<span class="hljs-number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="hljs-number">1500</span><br>        <span class="hljs-attribute">inet</span> <span class="hljs-number">192.168.10.100</span>  netmask <span class="hljs-number">255.255.255.0</span>  broadcast <span class="hljs-number">192.168.10.255</span><br>        <span class="hljs-attribute">inet6</span> fe80::<span class="hljs-number">5</span>fdd:f01e:a4fb:<span class="hljs-number">966</span>  prefixlen <span class="hljs-number">64</span>  scopeid <span class="hljs-number">0</span>x20&lt;link&gt;<br>        <span class="hljs-attribute">ether</span> <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:fc:a3:fe  txqueuelen <span class="hljs-number">1000</span>  (Ethernet)<br>        <span class="hljs-attribute">RX</span> packets <span class="hljs-number">1526</span>  bytes <span class="hljs-number">136998</span> (<span class="hljs-number">133</span>.<span class="hljs-number">7</span> KiB)<br>        <span class="hljs-attribute">RX</span> errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span>  overruns <span class="hljs-number">0</span>  frame <span class="hljs-number">0</span><br>        <span class="hljs-attribute">TX</span> packets <span class="hljs-number">1907</span>  bytes <span class="hljs-number">136735</span> (<span class="hljs-number">133</span>.<span class="hljs-number">5</span> KiB)<br>        <span class="hljs-attribute">TX</span> errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span> overruns <span class="hljs-number">0</span>  carrier <span class="hljs-number">0</span>  collisions <span class="hljs-number">0</span><br><br><span class="hljs-attribute">lo</span>: flags=<span class="hljs-number">73</span>&lt;UP,LOOPBACK,RUNNING&gt;  mtu <span class="hljs-number">65536</span><br>        <span class="hljs-attribute">inet</span> <span class="hljs-number">127.0.0.1</span>  netmask <span class="hljs-number">255.0.0.0</span><br>        <span class="hljs-attribute">inet6</span> ::<span class="hljs-number">1</span>  prefixlen <span class="hljs-number">128</span>  scopeid <span class="hljs-number">0</span>x10&lt;host&gt;<br>        <span class="hljs-attribute">loop</span>  txqueuelen <span class="hljs-number">1000</span>  (Local Loopback)<br>        <span class="hljs-attribute">RX</span> packets <span class="hljs-number">68</span>  bytes <span class="hljs-number">5916</span> (<span class="hljs-number">5</span>.<span class="hljs-number">7</span> KiB)<br>        <span class="hljs-attribute">RX</span> errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span>  overruns <span class="hljs-number">0</span>  frame <span class="hljs-number">0</span><br>        <span class="hljs-attribute">TX</span> packets <span class="hljs-number">68</span>  bytes <span class="hljs-number">5916</span> (<span class="hljs-number">5</span>.<span class="hljs-number">7</span> KiB)<br>        <span class="hljs-attribute">TX</span> errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span> overruns <span class="hljs-number">0</span>  carrier <span class="hljs-number">0</span>  collisions <span class="hljs-number">0</span><br><br><span class="hljs-attribute">virbr0</span>: flags=<span class="hljs-number">4099</span>&lt;UP,BROADCAST,MULTICAST&gt;  mtu <span class="hljs-number">1500</span><br>        <span class="hljs-attribute">inet</span> <span class="hljs-number">192.168.122.1</span>  netmask <span class="hljs-number">255.255.255.0</span>  broadcast <span class="hljs-number">192.168.122.255</span><br>        <span class="hljs-attribute">ether</span> <span class="hljs-number">52</span>:<span class="hljs-number">54</span>:<span class="hljs-number">00</span>:ea:<span class="hljs-number">8</span>a:fb  txqueuelen <span class="hljs-number">1000</span>  (Ethernet)<br>        <span class="hljs-attribute">RX</span> packets <span class="hljs-number">0</span>  bytes <span class="hljs-number">0</span> (<span class="hljs-number">0</span>.<span class="hljs-number">0</span> B)<br>        <span class="hljs-attribute">RX</span> errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span>  overruns <span class="hljs-number">0</span>  frame <span class="hljs-number">0</span><br>        <span class="hljs-attribute">TX</span> packets <span class="hljs-number">0</span>  bytes <span class="hljs-number">0</span> (<span class="hljs-number">0</span>.<span class="hljs-number">0</span> B)<br>        <span class="hljs-attribute">TX</span> errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span> overruns <span class="hljs-number">0</span>  carrier <span class="hljs-number">0</span>  collisions <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>其中ens33是目前的以太网接口，故其配置文件为<code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code>。</p></li><li><p>修改网络配置文件</p><p>打开配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens33 <br></code></pre></td></tr></table></figure><p>内容如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">TYPE</span>=Ethernet<br><span class="hljs-attr">PROXY_METHOD</span>=none<br><span class="hljs-attr">BROWSER_ONLY</span>=<span class="hljs-literal">no</span><br><span class="hljs-attr">BOOTPROTO</span>=dhcp<br><span class="hljs-attr">DEFROUTE</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV4_FAILURE_FATAL</span>=<span class="hljs-literal">no</span><br><span class="hljs-attr">IPV6INIT</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV6_AUTOCONF</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV6_DEFROUTE</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV6_FAILURE_FATAL</span>=<span class="hljs-literal">no</span><br><span class="hljs-attr">IPV6_ADDR_GEN_MODE</span>=stable-privacy<br><span class="hljs-attr">NAME</span>=ens33<br><span class="hljs-attr">UUID</span>=bf788989-e095-<span class="hljs-number">4</span>e58-<span class="hljs-number">865</span>a-e6b07248a514<br><span class="hljs-attr">DEVICE</span>=ens33<br><span class="hljs-attr">ONBOOT</span>=<span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><p>需要修改的内容如下</p><ul><li><p>修改<code>BOOTPROTO</code>参数为<code>static</code></p></li><li><p>修改<code>ONBOOT</code>参数为<code>yes</code></p></li><li><p>增加如下内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">IPADDR</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">10.100</span><br><span class="hljs-attr">NETMASK</span>=<span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br><span class="hljs-attr">GATEWAY</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">10.2</span><br><span class="hljs-attr">DNS1</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">10.2</span><br></code></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p><code>IPADDR</code>需要位于前文VMnet8子网IP范围内，<code>GATEWAY</code>需要配置为前文的NAT服务的网管IP。</p></li></ul></li><li><p>重新启动网络服务</p><p>在终端执行以下命令，重启network服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# systemctl restart network<br></code></pre></td></tr></table></figure></li><li><p>观察网络配置是否生效</p><p>在终端执行<code>ifoconfig</code>命令，观察<code>ens33</code>的网络接口的IP地址是否为前文所配置的<code>IPADDR</code>。1</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>测试开发学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何更好的发现bug</title>
    <link href="/2025/06/15/%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%8F%91%E7%8E%B0bug/"/>
    <url>/2025/06/15/%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%8F%91%E7%8E%B0bug/</url>
    
    <content type="html"><![CDATA[<h2 id="如何更好的发现Bug？"><a href="#如何更好的发现Bug？" class="headerlink" title="如何更好的发现Bug？"></a>如何更好的发现Bug？</h2><p>1、按照测试用例执行，只有能正常执行就行(最直接的)</p><p>2、模拟用户使用一下你测试的模块；</p><p>3、评审通过的测试用例；</p><p>4、作为一名最终的用户你会怎么用；</p><p>5、发散性使用，不考虑逻辑随便用用；</p>]]></content>
    
    
    
    <tags>
      
      <tag>工作tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github+Hexo博客使用教程</title>
    <link href="/2025/06/15/Github-Hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2025/06/15/Github-Hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Github博客使用教程"><a href="#Hexo-Github博客使用教程" class="headerlink" title="Hexo+Github博客使用教程"></a>Hexo+Github博客使用教程</h1><p>首先，进入到以下路径：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">D:</span>\Blog<br></code></pre></td></tr></table></figure><p><img src="/.io//image-20250615120955387.jpg" alt="image-20250615120955387.jpg"> <img src="/.io//image-20250615121118290.png" alt="image-20250615121118290.png"></p><p><img src="/.io//image-20250615121540654.png" alt="image-20250615121540654.png"></p><p>进入到GUI窗口</p><p>使用的流程：</p><h4 id="1-新建一篇文章"><a href="#1-新建一篇文章" class="headerlink" title="1.新建一篇文章"></a>1.新建一篇文章</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">hexo <span class="hljs-built_in">new</span> <span class="hljs-string">&quot;文章名字&quot;</span> <span class="hljs-comment">#简写 hexo n &quot;文章名字&quot;</span><br>例如：hexo <span class="hljs-built_in">new</span> <span class="hljs-built_in">post</span> <span class="hljs-string">&quot;Hello World&quot;</span>  <span class="hljs-comment">#新建一篇名叫Hello World的文章</span><br><br>hexo <span class="hljs-built_in">new</span> <span class="hljs-built_in">post</span> <span class="hljs-string">&quot;Hello World&quot;</span>  <span class="hljs-comment"># 创建文章</span><br>hexo <span class="hljs-built_in">new</span> page <span class="hljs-string">&quot;about&quot;</span>        <span class="hljs-comment"># 创建独立页面</span><br>hexo <span class="hljs-built_in">new</span> draft <span class="hljs-string">&quot;new-feature&quot;</span> <span class="hljs-comment"># 创建草稿（暂不发布）</span><br></code></pre></td></tr></table></figure><h4 id="2-要是你想给文章添加分类和标签，可以在生成的-Markdown-文件开头的元数据部分进行设置："><a href="#2-要是你想给文章添加分类和标签，可以在生成的-Markdown-文件开头的元数据部分进行设置：" class="headerlink" title="2.要是你想给文章添加分类和标签，可以在生成的 Markdown 文件开头的元数据部分进行设置："></a>2.要是你想给文章添加分类和标签，可以在生成的 Markdown 文件开头的元数据部分进行设置：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2025-06-15 12:00:00</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">分类名称</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">标签1</span>, <span class="hljs-string">标签2</span>]<br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h4 id="3-编辑文章内容"><a href="#3-编辑文章内容" class="headerlink" title="3.编辑文章内容"></a>3.编辑文章内容</h4><p>你可以使用任意文本编辑器来编辑刚才生成的 Markdown 文件。Hexo 支持标准的 Markdown 语法，同时还能<strong>使用 Hexo 特有的标签插件</strong>，比如插入图片、视频等。</p><p>可以查看<a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a> hexo的官网地址。</p><h3 id="二、本地预览文章效果"><a href="#二、本地预览文章效果" class="headerlink" title="二、本地预览文章效果"></a>二、本地预览文章效果</h3><h4 id="1-生成静态文件"><a href="#1-生成静态文件" class="headerlink" title="1. 生成静态文件"></a>1. 生成静态文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate  <span class="hljs-comment"># 也可以简写为hexo g，执行后会在public目录生成静态网页文件</span><br></code></pre></td></tr></table></figure><h4 id="2-启动本地服务器"><a href="#2-启动本地服务器" class="headerlink" title="2. 启动本地服务器"></a>2. 启动本地服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server  <span class="hljs-comment"># 也可简写为hexo s，启动后访问http://localhost:4000就能预览博客</span><br></code></pre></td></tr></table></figure><h3 id="三、将文章部署到-GitHub-Pages"><a href="#三、将文章部署到-GitHub-Pages" class="headerlink" title="三、将文章部署到 GitHub Pages"></a>三、将文章部署到 GitHub Pages</h3><h4 id="1-清除缓存（可选操作）"><a href="#1-清除缓存（可选操作）" class="headerlink" title="1. 清除缓存（可选操作）"></a>1. 清除缓存（可选操作）</h4><p>在部署之前，建议先清除缓存文件，防止旧文件对部署产生影响：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean  <span class="hljs-comment"># 此命令会清除public目录和缓存文件</span><br></code></pre></td></tr></table></figure><h4 id="2-生成并部署文章"><a href="#2-生成并部署文章" class="headerlink" title="2. 生成并部署文章"></a>2. 生成并部署文章</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy  <span class="hljs-comment"># 也能简写为hexo d，该命令会把public目录下的文件推送到GitHub</span><br></code></pre></td></tr></table></figure><p>如果你希望一步完成生成和部署操作，可使用组合命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g -d  <span class="hljs-comment"># 等同于依次执行hexo generate和hexo deploy</span><br></code></pre></td></tr></table></figure><h4 id="2-处理图片和资源"><a href="#2-处理图片和资源" class="headerlink" title="2. 处理图片和资源"></a>2. 处理图片和资源</h4><p>如果你在文章里需要插入图片，可以把图片文件存放在<code>source/images</code>目录下，然后在 Markdown 中使用相对路径进行引用：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">图片描述</span>](<span class="hljs-link">/images/filename.jpg</span>)<br></code></pre></td></tr></table></figure><h1 id="修改文章名字"><a href="#修改文章名字" class="headerlink" title="修改文章名字"></a>修改文章名字</h1><p>在 Hexo 中修改博客文章名称需要同时更新文件名称和元数据，确保链接和引用的一致性。以下是详细步骤：</p><h3 id="第一步：修改本地文件名称"><a href="#第一步：修改本地文件名称" class="headerlink" title="第一步：修改本地文件名称"></a>第一步：修改本地文件名称</h3><p>找到<code>source/_posts</code>目录下对应的 Markdown 文件，重命名它。例如将<code>old-title.md</code>改为<code>new-title.md</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> your-blog/source/_posts<br><span class="hljs-built_in">mv</span> old-title.md new-title.md  <span class="hljs-comment"># 重命名文件</span><br></code></pre></td></tr></table></figure><h3 id="第二步：更新文章内部元数据"><a href="#第二步：更新文章内部元数据" class="headerlink" title="第二步：更新文章内部元数据"></a>第二步：更新文章内部元数据</h3><p>打开修改后的文件，更新<code>title</code>字段以匹配新标题：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 新的文章标题  # 修改这里<br>date: 2023-01-01<br><span class="hljs-section">tags: [标签1, 标签2]</span><br><span class="hljs-section">---</span><br><br>正文内容...<br></code></pre></td></tr></table></figure><h3 id="第三步：处理永久链接（可选）"><a href="#第三步：处理永久链接（可选）" class="headerlink" title="第三步：处理永久链接（可选）"></a>第三步：处理永久链接（可选）</h3><p>如果希望 URL 保持不变，可以通过<code>permalink</code>字段固定链接：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 新的文章标题<br>date: 2023-01-01<br><span class="hljs-section">permalink: old-title  # 保持旧URL</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><h3 id="第四步：更新引用和链接"><a href="#第四步：更新引用和链接" class="headerlink" title="第四步：更新引用和链接"></a>第四步：更新引用和链接</h3><p>检查其他文章或页面中是否存在对旧标题的直接链接，如有需要手动更新这些引用。</p><h3 id="第五步：重新生成并部署"><a href="#第五步：重新生成并部署" class="headerlink" title="第五步：重新生成并部署"></a>第五步：重新生成并部署</h3><p>执行以下命令重新生成静态文件并推送到 GitHub：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean  <span class="hljs-comment"># 清除缓存</span><br>hexo generate  <span class="hljs-comment"># 重新生成</span><br>hexo deploy  <span class="hljs-comment"># 部署到GitHub</span><br></code></pre></td></tr></table></figure><h1 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h1><h3 id="第一步：删除本地博客文件"><a href="#第一步：删除本地博客文件" class="headerlink" title="第一步：删除本地博客文件"></a>第一步：删除本地博客文件</h3><p>你可以在博客项目的<code>source/_posts</code>目录中，找到hexo想要删除的那篇博客对应的 Markdown 文件，然后将其删除。比如，若要删除名为<code>hello-world.md</code>的博客，可使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> your-blog-name/source/_posts  <span class="hljs-comment"># 进入存放博客文章的目录</span><br><span class="hljs-built_in">rm</span> hello-world.md  <span class="hljs-comment"># 删除对应的博客文件</span><br></code></pre></td></tr></table></figure><h3 id="第二步：更新本地的标签和分类"><a href="#第二步：更新本地的标签和分类" class="headerlink" title="第二步：更新本地的标签和分类"></a>第二步：更新本地的标签和分类</h3><p>删除博客之后，你要更新本地的标签和分类信息。执行以下命令来重新生成静态文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean  <span class="hljs-comment"># 清除缓存文件和已生成的静态文件</span><br>hexo generate  <span class="hljs-comment"># 重新生成静态文件</span><br></code></pre></td></tr></table></figure><h3 id="第三步：将更改推送到-GitHub"><a href="#第三步：将更改推送到-GitHub" class="headerlink" title="第三步：将更改推送到 GitHub"></a>第三步：将更改推送到 GitHub</h3><p>最后，你需要把本地的更改推送到 GitHub 上，让线上博客也更新。执行下面的命令来部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy  <span class="hljs-comment"># 将更改部署到GitHub Pages</span><br></code></pre></td></tr></table></figure><h3 id="第四步：验证博客是否已删除"><a href="#第四步：验证博客是否已删除" class="headerlink" title="第四步：验证博客是否已删除"></a>第四步：验证博客是否已删除</h3><p>完成上述操作后，你可以访问自己的博客网址，确认那篇博客是否已经被成功删除。要是你使用了缓存插件，可能需要清除浏览器缓存才能看到最新的效果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>测试开发学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UI自动化总结</title>
    <link href="/2025/06/12/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <url>/2025/06/12/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="UI自动化测试总结"><a href="#UI自动化测试总结" class="headerlink" title="UI自动化测试总结"></a>UI自动化测试总结</h1><h2 id="1-自动化测试基础"><a href="#1-自动化测试基础" class="headerlink" title="1. 自动化测试基础"></a>1. 自动化测试基础</h2><h3 id="1-1-自动化测试的定义"><a href="#1-1-自动化测试的定义" class="headerlink" title="1.1 自动化测试的定义"></a>1.1 自动化测试的定义</h3><h3 id="1-2-自动化测试的目的"><a href="#1-2-自动化测试的目的" class="headerlink" title="1.2 自动化测试的目的"></a>1.2 自动化测试的目的</h3><ul><li>减少成本，提高测试效率</li><li>减少人为因素对测试的影响</li></ul><h3 id="1-3-什么项目适合做自动化测试"><a href="#1-3-什么项目适合做自动化测试" class="headerlink" title="1.3 什么项目适合做自动化测试"></a>1.3 什么项目适合做自动化测试</h3><ul><li><p>项目界面稳定</p></li><li><p>需求明确</p></li><li><p>项目周期长</p></li><li><p>测试脚本可以重复使用</p></li><li><p>需要频繁地进行回归测试</p></li></ul><h3 id="1-4-难点"><a href="#1-4-难点" class="headerlink" title="1.4 难点"></a>1.4 难点</h3><ul><li>对比手工UI测试，UI自动化测试有如下的难点：<br>1）UI本身的变化性，要想达到和手工测试相同的覆盖率，单纯的UI自动化测试往往很难 证明自己的投资回报；</li><li>2）UI控件元素本身识别的复杂性；</li><li>3）UI自动化测试出现问题时，恢复到下一条测试case执行的场景是复杂的。因为出现 这种问题的意外，是非“预期”的；</li></ul><h2 id="2、搭建自动化测试环境"><a href="#2、搭建自动化测试环境" class="headerlink" title="2、搭建自动化测试环境"></a>2、搭建自动化测试环境</h2><h3 id="2-1-安装python"><a href="#2-1-安装python" class="headerlink" title="2.1 安装python"></a>2.1 安装python</h3><p>略</p><h3 id="2-2-安装selenium-Web自动化适用"><a href="#2-2-安装selenium-Web自动化适用" class="headerlink" title="2.2 安装selenium(Web自动化适用)"></a>2.2 安装selenium(Web自动化适用)</h3><ul><li><p>安装Selenium的最新版本</p></li><li><p>pip install selenium</p></li><li><p>安装Selenium指定版本</p></li><li><p>pip install selenium&#x3D;&#x3D;2.53.0</p></li></ul><h3 id="2-3-下载webdriver驱动"><a href="#2-3-下载webdriver驱动" class="headerlink" title="2.3 下载webdriver驱动"></a>2.3 下载webdriver驱动</h3><ul><li><p>以chrome浏览器为例 查看chrome浏览器版本：在地址栏输入 chrome:&#x2F;&#x2F;version</p></li><li><p>chromedriver下载地址：<a href="http://chromedriver.storage.googleapis.com/index.htm">http://chromedriver.storage.googleapis.com/index.htm</a><br>下载与浏览器版本对应的chrome driver<br>将下载好的chrome driver 解压，并放至到Python安装路径的根目录 （安装路径随意一个都行）</p></li></ul><h3 id="2-4-第一个自动化测试脚本"><a href="#2-4-第一个自动化测试脚本" class="headerlink" title="2.4 第一个自动化测试脚本"></a>2.4 第一个自动化测试脚本</h3><ul><li><p>打开浏览器访问百度首页 from selenium import webdriver # 导入webdriver</p></li><li><p>d &#x3D; webdriver.Chrome() # 创建浏览器对象，此方法需要提前将webdriver驱动添加到系统环境变量</p></li><li><p>d.get(‘<a href="https://www.baidu.com/">https://www.baidu.com</a>‘) # 调用get方法访问百度首页</p></li><li><p>d.close() # 关闭浏览器</p></li></ul><h2 id="3、webdriver-API"><a href="#3、webdriver-API" class="headerlink" title="3、webdriver API"></a>3、webdriver API</h2><h3 id="3-1-浏览器操作"><a href="#3-1-浏览器操作" class="headerlink" title="3.1 浏览器操作"></a>3.1 浏览器操作</h3><h4 id="3-1-1-浏览器最大化"><a href="#3-1-1-浏览器最大化" class="headerlink" title="3.1.1 浏览器最大化"></a>3.1.1 浏览器最大化</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">driver<span class="hljs-selector-class">.maximize_window</span>()<br></code></pre></td></tr></table></figure><h4 id="3-1-2-设置浏览器的宽和高"><a href="#3-1-2-设置浏览器的宽和高" class="headerlink" title="3.1.2 设置浏览器的宽和高"></a>3.1.2 设置浏览器的宽和高</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">driver</span>.set_window_size(<span class="hljs-number">480</span>,<span class="hljs-number">800</span>)<br></code></pre></td></tr></table></figure><h4 id="3-1-3-控制浏览器前进、后退"><a href="#3-1-3-控制浏览器前进、后退" class="headerlink" title="3.1.3 控制浏览器前进、后退"></a>3.1.3 控制浏览器前进、后退</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">前进： driver<span class="hljs-selector-class">.forward</span>()<br>后退： driver<span class="hljs-selector-class">.back</span>()<br></code></pre></td></tr></table></figure><h4 id="3-1-4-关闭浏览器"><a href="#3-1-4-关闭浏览器" class="headerlink" title="3.1.4 关闭浏览器"></a>3.1.4 关闭浏览器</h4><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cos">关闭当前窗口： driver.<span class="hljs-keyword">close</span>()<br><br>关闭浏览器： driver.<span class="hljs-keyword">quit</span>()<br></code></pre></td></tr></table></figure><h4 id="3-1-5-浏览器刷新"><a href="#3-1-5-浏览器刷新" class="headerlink" title="3.1.5 浏览器刷新"></a>3.1.5 浏览器刷新</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">driver.<span class="hljs-built_in">ref</span>resh()<br></code></pre></td></tr></table></figure><h4 id="3-1-6-获取当前URL"><a href="#3-1-6-获取当前URL" class="headerlink" title="3.1.6 获取当前URL"></a>3.1.6 获取当前URL</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">driver.current_url<br></code></pre></td></tr></table></figure><h4 id="3-1-7-获取当前title"><a href="#3-1-7-获取当前title" class="headerlink" title="3.1.7 获取当前title"></a>3.1.7 获取当前title</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">driver.<span class="hljs-built_in">title</span><br></code></pre></td></tr></table></figure><h4 id="3-1-8-浏览器截图"><a href="#3-1-8-浏览器截图" class="headerlink" title="3.1.8 浏览器截图"></a>3.1.8 浏览器截图</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">driver.save_screenshot(图片路径)<br><span class="hljs-comment">--路径参数必填</span><br><br><span class="hljs-comment">--图片格式必须为png</span><br></code></pre></td></tr></table></figure><h3 id="3-2-元素定位"><a href="#3-2-元素定位" class="headerlink" title="3.2 元素定位"></a>3.2 元素定位</h3><p>3.2.1 常见的属性</p><ul><li><pre><code class="hljs">- class：元素的类名- id：元素的唯一id- name：元素名，大部分情况唯一<figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><br>  <br><br><br>3.2.2 八大元素定位方法<br><br><span class="hljs-bullet">-</span> <span class="hljs-string">```</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">元素定位和操作是自动化测试的核心部分</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">一个元素就像一个人，有自己的特征（属性）</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">webdriver提供了一系列的元素定位方法，常用的有下面几种：</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">id：根据元素id值</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name：根据元素name值</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">class name：根据元素class值</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">tag name：根据元素标签名字</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">link text：根据超链接的文本内容</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">partial link text：根据超链接的部分文本内容</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">xpath：根据xpath</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">css selector：通过css定位</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">xpath定位</span><br></code></pre></td></tr></table></figure></code></pre></li></ul><p>语法</p><p>&#x2F; ：从根节点选取（绝对路径）</p><p>&#x2F;&#x2F; ：从当前节点选取，不考虑节点的位置（相对路径）</p><p>.. ：选取当前节点的父节点 搜索框的上两级父节点： &#x2F;&#x2F;*[@id&#x3D;’kw’]&#x2F;..&#x2F;..</p><p>@ ：选取属性</p><p>举例：</p><p>相对路径： &#x2F;&#x2F;div[@class&#x3D;’entry-sider-panel’]&#x2F;section[@class&#x3D;’entry-sider-panel__bd’]&#x2F;div&#x2F;div[1]</p><p>CSS定位<br>语法<br>#：选取id属性，#kw<br>.：选取class属性<br>[]：选取其他属性，如：[id&#x3D;’xx’]</p><p>:层级选取，如：#form&gt;span&gt;input</p><p>举例：div.entry-sider-panel&gt;section.entry-sider-panel__bd&gt;div&gt;div:nth-child(1)</p><h3 id="3-3-元素操作"><a href="#3-3-元素操作" class="headerlink" title="3.3 元素操作"></a>3.3 元素操作</h3><h4 id="3-3-1-输入内容"><a href="#3-3-1-输入内容" class="headerlink" title="3.3.1 输入内容"></a>3.3.1 输入内容</h4><ul><li>send_keys()</li></ul><h4 id="3-3-2-点击元素"><a href="#3-3-2-点击元素" class="headerlink" title="3.3.2 点击元素"></a>3.3.2 点击元素</h4><ul><li>click()</li></ul><h4 id="3-3-3-清空元素文本内容"><a href="#3-3-3-清空元素文本内容" class="headerlink" title="3.3.3 清空元素文本内容"></a>3.3.3 清空元素文本内容</h4><ul><li>clear()</li></ul><h4 id="3-3-4-获取元素文本"><a href="#3-3-4-获取元素文本" class="headerlink" title="3.3.4 获取元素文本"></a>3.3.4 获取元素文本</h4><ul><li>text</li></ul><p>返回的是字符串</p><h4 id="3-3-5-获取元素尺寸"><a href="#3-3-5-获取元素尺寸" class="headerlink" title="3.3.5 获取元素尺寸"></a>3.3.5 获取元素尺寸</h4><ul><li>size</li></ul><p>返回的是字典</p><h4 id="3-3-6-获取元素的属性值"><a href="#3-3-6-获取元素的属性值" class="headerlink" title="3.3.6 获取元素的属性值"></a>3.3.6 获取元素的属性值</h4><ul><li>get_attribute(‘属性值’) –如id，class</li></ul><h2 id="4、设置等待时间"><a href="#4、设置等待时间" class="headerlink" title="4、设置等待时间"></a>4、设置等待时间</h2><h3 id="4-1-强制等待"><a href="#4-1-强制等待" class="headerlink" title="4.1 强制等待"></a>4.1 强制等待</h3><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">sleep</span></span>()</span><br><br>需要先导包，<span class="hljs-variable">import</span> <span class="hljs-variable">time</span><br></code></pre></td></tr></table></figure><h3 id="4-2-隐式等待"><a href="#4-2-隐式等待" class="headerlink" title="4.2 隐式等待"></a>4.2 隐式等待</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">driver<span class="hljs-selector-class">.implicitly_wait</span>(秒)<br></code></pre></td></tr></table></figure><ul><li>智能等待是在等待周期内一直等待元素是否出现，如果元素出现则继续，元素在等待周期内没有出现则报错</li><li>推荐等待时间：10-30秒</li><li>隐式等待只需设置一次就可以对整个脚本文件生效</li></ul><h3 id="4-3-显式等待"><a href="#4-3-显式等待" class="headerlink" title="4.3 显式等待"></a>4.3 显式等待</h3><p>显式等待使WebdDriver等待某个条件成立时继续执行，否则在达到最大时长时抛出超时异常</p><p>示例代码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.<span class="hljs-keyword">by</span> <span class="hljs-keyword">import</span> <span class="hljs-keyword">By</span><br><span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br><br>driver = webdriver.Chrome()<br>driver.<span class="hljs-keyword">get</span>(&quot;http://www.baidu.com&quot;) # 每隔 <span class="hljs-number">0.5</span>s 检查一次(默认就是 <span class="hljs-number">0.5</span>s), 最多等待 <span class="hljs-number">5</span> 秒<br>element = WebDriverWait(driver, <span class="hljs-number">5</span>, <span class="hljs-number">0.5</span>).<span class="hljs-keyword">until</span>( EC.visibility_of_element_located( (<span class="hljs-keyword">By</span>.ID, &quot;kw&quot;)<br>) )<br>element.send_keys(<span class="hljs-string">&#x27;selenium&#x27;</span>)<br>driver.quit()<br></code></pre></td></tr></table></figure><h2 id="5、滚动条操作、下拉框操作"><a href="#5、滚动条操作、下拉框操作" class="headerlink" title="5、滚动条操作、下拉框操作"></a>5、滚动条操作、下拉框操作</h2><h3 id="5-1-操作滚动条"><a href="#5-1-操作滚动条" class="headerlink" title="5.1 操作滚动条"></a>5.1 操作滚动条</h3><p>注意：操作滚动天是通过js操作的，不是通过selenium操作的</p><p>方法一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">from selenium import webdriver<br><br>from <span class="hljs-keyword">time</span> import <span class="hljs-built_in">sleep</span><br><br>driver = webdriver.Chrome()<br><br>driver.get(<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>)<br><br>driver.set_window_size(688,476)<br><br><span class="hljs-built_in">sleep</span>(1)<br><br>js = <span class="hljs-string">&#x27;window.scrollTo(0,10000)&#x27;</span> <span class="hljs-comment"># 拖动到底部</span><br><br>driver.execute_script(js) <span class="hljs-comment"># 执行js命令</span><br><br><span class="hljs-built_in">sleep</span>(1)<br><br>js2 = <span class="hljs-string">&#x27;window.scrollTo(10000,0)&#x27;</span> <span class="hljs-comment"># 从左拖到右</span><br><br>driver.execute_script(js2)<br><br><span class="hljs-built_in">sleep</span>(1)<br><br>js3 = <span class="hljs-string">&#x27;window.scrollTo(10000,10000)&#x27;</span> <span class="hljs-comment"># 拖到右下角</span><br><br>driver.execute_script(js3)<br><br><span class="hljs-built_in">sleep</span>(2)<br><br>driver.quit()<br></code></pre></td></tr></table></figure><p>方法二（推荐）：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">target = <span class="hljs-variable language_">self</span>.element(<span class="hljs-variable language_">self</span>.locators[<span class="hljs-string">&#x27;product_des&#x27;</span>]) <span class="hljs-comment"># 定位到目标元素</span><br><span class="hljs-variable language_">self</span>._driver.execute_script(<span class="hljs-string">&quot;arguments[0].scrollIntoView();&quot;</span>, target) <span class="hljs-comment"># 滚动条滑动到目标元素</span><br></code></pre></td></tr></table></figure><h3 id="5-2-操作下拉框"><a href="#5-2-操作下拉框" class="headerlink" title="5.2 操作下拉框"></a>5.2 操作下拉框</h3><p>方法一：二次定位，先定位到下拉框，然后通过里面的值进行定位</p><p>方法二：通过select库进行操作</p><p>示例代码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> <span class="hljs-type">time</span> <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium.webdriver.support.<span class="hljs-keyword">select</span> <span class="hljs-keyword">import</span> <span class="hljs-keyword">Select</span><br>driver = webdriver.Chrome()<br><br>driver.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;file:///C:/Users/Eccang/Desktop/test.html&#x27;</span>)<br>sleep(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>方法一</p><p>二次定位</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">m</span> = driver.find_element_by_id(<span class="hljs-string">&#x27;abc&#x27;</span>) <span class="hljs-comment"># 先定位到下拉框</span><br><br>m.find_element_by_xpath(<span class="hljs-string">&quot;//*[<span class="hljs-variable">@value</span>=&#x27;p1&#x27;]&quot;</span>).click() <span class="hljs-comment"># 再定位一次选择里面的选项</span><br></code></pre></td></tr></table></figure><p>方法二</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">Select</span>(m).select_by_index(<span class="hljs-number">1</span>) <span class="hljs-meta"># 根据索引值选择</span><br><span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">Select</span>(m).select_by_value(<span class="hljs-string">&#x27;p2&#x27;</span>) <span class="hljs-meta"># 根据值选择</span><br><span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">Select</span>(m).select_by_visible_text(<span class="hljs-string">&#x27;深圳&#x27;</span>) <span class="hljs-meta"># 根据可见文本选择</span><br></code></pre></td></tr></table></figure><h2 id="6、多窗口处理、弹框处理"><a href="#6、多窗口处理、弹框处理" class="headerlink" title="6、多窗口处理、弹框处理"></a>6、多窗口处理、弹框处理</h2><h3 id="6-1-多窗口处理"><a href="#6-1-多窗口处理" class="headerlink" title="6.1 多窗口处理"></a>6.1 多窗口处理</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lasso">根据窗口的<span class="hljs-keyword">handle</span>值进行切换<br><br>获取当前窗口<span class="hljs-keyword">handle</span>值：driver.current_window_handle<br><br>获取所有窗口<span class="hljs-keyword">handle</span>值：driver.window_handles<br><br>根据<span class="hljs-keyword">handle</span>值切换窗口：driver.switch_to.window(窗口<span class="hljs-keyword">handle</span>值)<br></code></pre></td></tr></table></figure><h3 id="6-2-弹框处理"><a href="#6-2-弹框处理" class="headerlink" title="6.2 弹框处理"></a>6.2 弹框处理</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">点击确定：driver<span class="hljs-selector-class">.switch_to</span><span class="hljs-selector-class">.alert</span><span class="hljs-selector-class">.accept</span>()<br><br>点击取消：driver<span class="hljs-selector-class">.switch_to</span><span class="hljs-selector-class">.alert</span><span class="hljs-selector-class">.dismiss</span>()<br><br>弹框中输入文本：driver<span class="hljs-selector-class">.switch_to</span><span class="hljs-selector-class">.alert</span><span class="hljs-selector-class">.send_keys</span>()<br><br>获取弹框中的文本内容：driver<span class="hljs-selector-class">.switch_to</span><span class="hljs-selector-class">.alert</span>.text<br></code></pre></td></tr></table></figure><h2 id="7、框架切换、文件上传"><a href="#7、框架切换、文件上传" class="headerlink" title="7、框架切换、文件上传"></a>7、框架切换、文件上传</h2><h3 id="7-1-框架切换"><a href="#7-1-框架切换" class="headerlink" title="7.1 框架切换"></a>7.1 框架切换</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">切换框架：driver<span class="hljs-selector-class">.switch_to</span><span class="hljs-selector-class">.frame</span>(id/name)<br><br>返回默认框架：driver<span class="hljs-selector-class">.switch_to</span><span class="hljs-selector-class">.default_content</span>()<br></code></pre></td></tr></table></figure><h3 id="7-2-文件上传"><a href="#7-2-文件上传" class="headerlink" title="7.2 文件上传"></a>7.2 文件上传</h3><p>对于通过input标签实现的上传功能，可以将其看作是一个输入框，即通过 send_keys()指定本地文件路径的方式实现文件上传</p><p>对于非 input 标签实现的上传功能，我们可以通过模拟键盘敲击的方式实现，代码如下：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-built_in">import</span> win32com.client <span class="hljs-comment"># 导入Windows API模块</span><br><br>driver.find_element_by_css_selector(<span class="hljs-string">&quot;#top .icon&quot;</span>).click()<br>s<span class="hljs-attr">h</span> <span class="hljs-operator">=</span> win32com.client.Dispatch(<span class="hljs-string">&quot;WScript.shell&quot;</span>)<br>time.sleep(<span class="hljs-number">3</span>)<br>sh.Sendkeys(<span class="hljs-string">&quot;C:<span class="hljs-char escape_">\\</span>Users<span class="hljs-char escape_">\D</span>ownloads<span class="hljs-char escape_">\f</span>89860fb73c0ba14c9b88845eb10b928.jpeg<span class="hljs-char escape_">\n</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="8、浏览器无头模式"><a href="#8、浏览器无头模式" class="headerlink" title="8、浏览器无头模式"></a>8、浏览器无头模式</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile">chrome_options = Options() <span class="hljs-comment"># 开发者模式，防止被各大网站识别出来用了selenium</span><br>chrome_options.add_argument(&#x27;--headless&#x27;) <span class="hljs-comment"># 添加谷歌无头浏览器模式</span><br><br>driver=webdriver.Chrome(options=chrome_options) <span class="hljs-comment"># 谷歌无头浏览器模式</span><br></code></pre></td></tr></table></figure><h2 id="9、单例模式"><a href="#9、单例模式" class="headerlink" title="9、单例模式"></a>9、单例模式</h2><p>单例模式：单例模式就是确保一个类只有一个实例.当你希望整个系统中,某个类只有一个实例时,单例模式就派上了用场</p><p>由于在做web UI测试的时候需要浏览器对象，在实际写脚本的过程中可能会遇到只要调用一次webdriver就会生成一个浏览器对象，此时我们可以用到单例模式来处理（或者自己写一个判断语句也是可以处理的）。具体实现代码如下：</p><p>后续有时间会补充一些写自动化测试用例过程中需要用到的分层思想，已经一些测试用例、脚本关联、数据处理方面的东西。</p>]]></content>
    
    
    
    <tags>
      
      <tag>测试开发学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
