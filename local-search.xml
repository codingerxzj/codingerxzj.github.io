<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Github+Hexo博客使用教程</title>
    <link href="/2025/06/15/Github-Hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2025/06/15/Github-Hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Github博客使用教程"><a href="#Hexo-Github博客使用教程" class="headerlink" title="Hexo+Github博客使用教程"></a>Hexo+Github博客使用教程</h1><p>首先，进入到以下路径：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">D:</span>\Blog<br></code></pre></td></tr></table></figure><p><img src="/.io//image-20250615120955387.png" alt="image-20250615120955387.png"> <img src="/.io//image-20250615121118290.png" alt="image-20250615121118290.png"></p><p><img src="/.io//image-20250615121540654.png" alt="image-20250615121540654.png"></p><p>进入到GUI窗口</p><p>使用的流程：</p><h4 id="1-新建一篇文章"><a href="#1-新建一篇文章" class="headerlink" title="1.新建一篇文章"></a>1.新建一篇文章</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">hexo <span class="hljs-built_in">new</span> <span class="hljs-string">&quot;文章名字&quot;</span> <span class="hljs-comment">#简写 hexo n &quot;文章名字&quot;</span><br>例如：hexo <span class="hljs-built_in">new</span> <span class="hljs-built_in">post</span> <span class="hljs-string">&quot;Hello World&quot;</span>  <span class="hljs-comment">#新建一篇名叫Hello World的文章</span><br><br>hexo <span class="hljs-built_in">new</span> <span class="hljs-built_in">post</span> <span class="hljs-string">&quot;Hello World&quot;</span>  <span class="hljs-comment"># 创建文章</span><br>hexo <span class="hljs-built_in">new</span> page <span class="hljs-string">&quot;about&quot;</span>        <span class="hljs-comment"># 创建独立页面</span><br>hexo <span class="hljs-built_in">new</span> draft <span class="hljs-string">&quot;new-feature&quot;</span> <span class="hljs-comment"># 创建草稿（暂不发布）</span><br></code></pre></td></tr></table></figure><h4 id="2-要是你想给文章添加分类和标签，可以在生成的-Markdown-文件开头的元数据部分进行设置："><a href="#2-要是你想给文章添加分类和标签，可以在生成的-Markdown-文件开头的元数据部分进行设置：" class="headerlink" title="2.要是你想给文章添加分类和标签，可以在生成的 Markdown 文件开头的元数据部分进行设置："></a>2.要是你想给文章添加分类和标签，可以在生成的 Markdown 文件开头的元数据部分进行设置：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2025-06-15 12:00:00</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">分类名称</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">标签1</span>, <span class="hljs-string">标签2</span>]<br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h4 id="3-编辑文章内容"><a href="#3-编辑文章内容" class="headerlink" title="3.编辑文章内容"></a>3.编辑文章内容</h4><p>你可以使用任意文本编辑器来编辑刚才生成的 Markdown 文件。Hexo 支持标准的 Markdown 语法，同时还能<strong>使用 Hexo 特有的标签插件</strong>，比如插入图片、视频等。</p><p>可以查看<a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a> hexo的官网地址。</p><h3 id="二、本地预览文章效果"><a href="#二、本地预览文章效果" class="headerlink" title="二、本地预览文章效果"></a>二、本地预览文章效果</h3><h4 id="1-生成静态文件"><a href="#1-生成静态文件" class="headerlink" title="1. 生成静态文件"></a>1. 生成静态文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate  <span class="hljs-comment"># 也可以简写为hexo g，执行后会在public目录生成静态网页文件</span><br></code></pre></td></tr></table></figure><h4 id="2-启动本地服务器"><a href="#2-启动本地服务器" class="headerlink" title="2. 启动本地服务器"></a>2. 启动本地服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server  <span class="hljs-comment"># 也可简写为hexo s，启动后访问http://localhost:4000就能预览博客</span><br></code></pre></td></tr></table></figure><h3 id="三、将文章部署到-GitHub-Pages"><a href="#三、将文章部署到-GitHub-Pages" class="headerlink" title="三、将文章部署到 GitHub Pages"></a>三、将文章部署到 GitHub Pages</h3><h4 id="1-清除缓存（可选操作）"><a href="#1-清除缓存（可选操作）" class="headerlink" title="1. 清除缓存（可选操作）"></a>1. 清除缓存（可选操作）</h4><p>在部署之前，建议先清除缓存文件，防止旧文件对部署产生影响：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean  <span class="hljs-comment"># 此命令会清除public目录和缓存文件</span><br></code></pre></td></tr></table></figure><h4 id="2-生成并部署文章"><a href="#2-生成并部署文章" class="headerlink" title="2. 生成并部署文章"></a>2. 生成并部署文章</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy  <span class="hljs-comment"># 也能简写为hexo d，该命令会把public目录下的文件推送到GitHub</span><br></code></pre></td></tr></table></figure><p>如果你希望一步完成生成和部署操作，可使用组合命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g -d  <span class="hljs-comment"># 等同于依次执行hexo generate和hexo deploy</span><br></code></pre></td></tr></table></figure><h4 id="2-处理图片和资源"><a href="#2-处理图片和资源" class="headerlink" title="2. 处理图片和资源"></a>2. 处理图片和资源</h4><p>如果你在文章里需要插入图片，可以把图片文件存放在<code>source/images</code>目录下，然后在 Markdown 中使用相对路径进行引用：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">图片描述</span>](<span class="hljs-link">/images/filename.jpg</span>)<br></code></pre></td></tr></table></figure><h1 id="修改文章名字"><a href="#修改文章名字" class="headerlink" title="修改文章名字"></a>修改文章名字</h1><p>在 Hexo 中修改博客文章名称需要同时更新文件名称和元数据，确保链接和引用的一致性。以下是详细步骤：</p><h3 id="第一步：修改本地文件名称"><a href="#第一步：修改本地文件名称" class="headerlink" title="第一步：修改本地文件名称"></a>第一步：修改本地文件名称</h3><p>找到<code>source/_posts</code>目录下对应的 Markdown 文件，重命名它。例如将<code>old-title.md</code>改为<code>new-title.md</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> your-blog/source/_posts<br><span class="hljs-built_in">mv</span> old-title.md new-title.md  <span class="hljs-comment"># 重命名文件</span><br></code></pre></td></tr></table></figure><h3 id="第二步：更新文章内部元数据"><a href="#第二步：更新文章内部元数据" class="headerlink" title="第二步：更新文章内部元数据"></a>第二步：更新文章内部元数据</h3><p>打开修改后的文件，更新<code>title</code>字段以匹配新标题：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 新的文章标题  # 修改这里<br>date: 2023-01-01<br><span class="hljs-section">tags: [标签1, 标签2]</span><br><span class="hljs-section">---</span><br><br>正文内容...<br></code></pre></td></tr></table></figure><h3 id="第三步：处理永久链接（可选）"><a href="#第三步：处理永久链接（可选）" class="headerlink" title="第三步：处理永久链接（可选）"></a>第三步：处理永久链接（可选）</h3><p>如果希望 URL 保持不变，可以通过<code>permalink</code>字段固定链接：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 新的文章标题<br>date: 2023-01-01<br><span class="hljs-section">permalink: old-title  # 保持旧URL</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><h3 id="第四步：更新引用和链接"><a href="#第四步：更新引用和链接" class="headerlink" title="第四步：更新引用和链接"></a>第四步：更新引用和链接</h3><p>检查其他文章或页面中是否存在对旧标题的直接链接，如有需要手动更新这些引用。</p><h3 id="第五步：重新生成并部署"><a href="#第五步：重新生成并部署" class="headerlink" title="第五步：重新生成并部署"></a>第五步：重新生成并部署</h3><p>执行以下命令重新生成静态文件并推送到 GitHub：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean  <span class="hljs-comment"># 清除缓存</span><br>hexo generate  <span class="hljs-comment"># 重新生成</span><br>hexo deploy  <span class="hljs-comment"># 部署到GitHub</span><br></code></pre></td></tr></table></figure><h1 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h1><h3 id="第一步：删除本地博客文件"><a href="#第一步：删除本地博客文件" class="headerlink" title="第一步：删除本地博客文件"></a>第一步：删除本地博客文件</h3><p>你可以在博客项目的<code>source/_posts</code>目录中，找到hexo想要删除的那篇博客对应的 Markdown 文件，然后将其删除。比如，若要删除名为<code>hello-world.md</code>的博客，可使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> your-blog-name/source/_posts  <span class="hljs-comment"># 进入存放博客文章的目录</span><br><span class="hljs-built_in">rm</span> hello-world.md  <span class="hljs-comment"># 删除对应的博客文件</span><br></code></pre></td></tr></table></figure><h3 id="第二步：更新本地的标签和分类"><a href="#第二步：更新本地的标签和分类" class="headerlink" title="第二步：更新本地的标签和分类"></a>第二步：更新本地的标签和分类</h3><p>删除博客之后，你要更新本地的标签和分类信息。执行以下命令来重新生成静态文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean  <span class="hljs-comment"># 清除缓存文件和已生成的静态文件</span><br>hexo generate  <span class="hljs-comment"># 重新生成静态文件</span><br></code></pre></td></tr></table></figure><h3 id="第三步：将更改推送到-GitHub"><a href="#第三步：将更改推送到-GitHub" class="headerlink" title="第三步：将更改推送到 GitHub"></a>第三步：将更改推送到 GitHub</h3><p>最后，你需要把本地的更改推送到 GitHub 上，让线上博客也更新。执行下面的命令来部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy  <span class="hljs-comment"># 将更改部署到GitHub Pages</span><br></code></pre></td></tr></table></figure><h3 id="第四步：验证博客是否已删除"><a href="#第四步：验证博客是否已删除" class="headerlink" title="第四步：验证博客是否已删除"></a>第四步：验证博客是否已删除</h3><p>完成上述操作后，你可以访问自己的博客网址，确认那篇博客是否已经被成功删除。要是你使用了缓存插件，可能需要清除浏览器缓存才能看到最新的效果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>测试开发学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UI自动化总结</title>
    <link href="/2025/06/12/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <url>/2025/06/12/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="UI自动化测试总结"><a href="#UI自动化测试总结" class="headerlink" title="UI自动化测试总结"></a>UI自动化测试总结</h1><h2 id="1-自动化测试基础"><a href="#1-自动化测试基础" class="headerlink" title="1. 自动化测试基础"></a>1. 自动化测试基础</h2><h3 id="1-1-自动化测试的定义"><a href="#1-1-自动化测试的定义" class="headerlink" title="1.1 自动化测试的定义"></a>1.1 自动化测试的定义</h3><h3 id="1-2-自动化测试的目的"><a href="#1-2-自动化测试的目的" class="headerlink" title="1.2 自动化测试的目的"></a>1.2 自动化测试的目的</h3><ul><li>减少成本，提高测试效率</li><li>减少人为因素对测试的影响</li></ul><h3 id="1-3-什么项目适合做自动化测试"><a href="#1-3-什么项目适合做自动化测试" class="headerlink" title="1.3 什么项目适合做自动化测试"></a>1.3 什么项目适合做自动化测试</h3><ul><li><p>项目界面稳定</p></li><li><p>需求明确</p></li><li><p>项目周期长</p></li><li><p>测试脚本可以重复使用</p></li><li><p>需要频繁地进行回归测试</p></li></ul><h3 id="1-4-难点"><a href="#1-4-难点" class="headerlink" title="1.4 难点"></a>1.4 难点</h3><ul><li>对比手工UI测试，UI自动化测试有如下的难点：<br>1）UI本身的变化性，要想达到和手工测试相同的覆盖率，单纯的UI自动化测试往往很难 证明自己的投资回报；</li><li>2）UI控件元素本身识别的复杂性；</li><li>3）UI自动化测试出现问题时，恢复到下一条测试case执行的场景是复杂的。因为出现 这种问题的意外，是非“预期”的；</li></ul><h2 id="2、搭建自动化测试环境"><a href="#2、搭建自动化测试环境" class="headerlink" title="2、搭建自动化测试环境"></a>2、搭建自动化测试环境</h2><h3 id="2-1-安装python"><a href="#2-1-安装python" class="headerlink" title="2.1 安装python"></a>2.1 安装python</h3><p>略</p><h3 id="2-2-安装selenium-Web自动化适用"><a href="#2-2-安装selenium-Web自动化适用" class="headerlink" title="2.2 安装selenium(Web自动化适用)"></a>2.2 安装selenium(Web自动化适用)</h3><ul><li><p>安装Selenium的最新版本</p></li><li><p>pip install selenium</p></li><li><p>安装Selenium指定版本</p></li><li><p>pip install selenium&#x3D;&#x3D;2.53.0</p></li></ul><h3 id="2-3-下载webdriver驱动"><a href="#2-3-下载webdriver驱动" class="headerlink" title="2.3 下载webdriver驱动"></a>2.3 下载webdriver驱动</h3><ul><li><p>以chrome浏览器为例 查看chrome浏览器版本：在地址栏输入 chrome:&#x2F;&#x2F;version</p></li><li><p>chromedriver下载地址：<a href="http://chromedriver.storage.googleapis.com/index.htm">http://chromedriver.storage.googleapis.com/index.htm</a><br>下载与浏览器版本对应的chrome driver<br>将下载好的chrome driver 解压，并放至到Python安装路径的根目录 （安装路径随意一个都行）</p></li></ul><h3 id="2-4-第一个自动化测试脚本"><a href="#2-4-第一个自动化测试脚本" class="headerlink" title="2.4 第一个自动化测试脚本"></a>2.4 第一个自动化测试脚本</h3><ul><li><p>打开浏览器访问百度首页 from selenium import webdriver # 导入webdriver</p></li><li><p>d &#x3D; webdriver.Chrome() # 创建浏览器对象，此方法需要提前将webdriver驱动添加到系统环境变量</p></li><li><p>d.get(‘<a href="https://www.baidu.com/">https://www.baidu.com</a>‘) # 调用get方法访问百度首页</p></li><li><p>d.close() # 关闭浏览器</p></li></ul><h2 id="3、webdriver-API"><a href="#3、webdriver-API" class="headerlink" title="3、webdriver API"></a>3、webdriver API</h2><h3 id="3-1-浏览器操作"><a href="#3-1-浏览器操作" class="headerlink" title="3.1 浏览器操作"></a>3.1 浏览器操作</h3><h4 id="3-1-1-浏览器最大化"><a href="#3-1-1-浏览器最大化" class="headerlink" title="3.1.1 浏览器最大化"></a>3.1.1 浏览器最大化</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">driver<span class="hljs-selector-class">.maximize_window</span>()<br></code></pre></td></tr></table></figure><h4 id="3-1-2-设置浏览器的宽和高"><a href="#3-1-2-设置浏览器的宽和高" class="headerlink" title="3.1.2 设置浏览器的宽和高"></a>3.1.2 设置浏览器的宽和高</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">driver</span>.set_window_size(<span class="hljs-number">480</span>,<span class="hljs-number">800</span>)<br></code></pre></td></tr></table></figure><h4 id="3-1-3-控制浏览器前进、后退"><a href="#3-1-3-控制浏览器前进、后退" class="headerlink" title="3.1.3 控制浏览器前进、后退"></a>3.1.3 控制浏览器前进、后退</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">前进： driver<span class="hljs-selector-class">.forward</span>()<br>后退： driver<span class="hljs-selector-class">.back</span>()<br></code></pre></td></tr></table></figure><h4 id="3-1-4-关闭浏览器"><a href="#3-1-4-关闭浏览器" class="headerlink" title="3.1.4 关闭浏览器"></a>3.1.4 关闭浏览器</h4><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cos">关闭当前窗口： driver.<span class="hljs-keyword">close</span>()<br><br>关闭浏览器： driver.<span class="hljs-keyword">quit</span>()<br></code></pre></td></tr></table></figure><h4 id="3-1-5-浏览器刷新"><a href="#3-1-5-浏览器刷新" class="headerlink" title="3.1.5 浏览器刷新"></a>3.1.5 浏览器刷新</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">driver.<span class="hljs-built_in">ref</span>resh()<br></code></pre></td></tr></table></figure><h4 id="3-1-6-获取当前URL"><a href="#3-1-6-获取当前URL" class="headerlink" title="3.1.6 获取当前URL"></a>3.1.6 获取当前URL</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">driver.current_url<br></code></pre></td></tr></table></figure><h4 id="3-1-7-获取当前title"><a href="#3-1-7-获取当前title" class="headerlink" title="3.1.7 获取当前title"></a>3.1.7 获取当前title</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">driver.<span class="hljs-built_in">title</span><br></code></pre></td></tr></table></figure><h4 id="3-1-8-浏览器截图"><a href="#3-1-8-浏览器截图" class="headerlink" title="3.1.8 浏览器截图"></a>3.1.8 浏览器截图</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">driver.save_screenshot(图片路径)<br><span class="hljs-comment">--路径参数必填</span><br><br><span class="hljs-comment">--图片格式必须为png</span><br></code></pre></td></tr></table></figure><h3 id="3-2-元素定位"><a href="#3-2-元素定位" class="headerlink" title="3.2 元素定位"></a>3.2 元素定位</h3><p>3.2.1 常见的属性</p><ul><li><pre><code class="hljs">- class：元素的类名- id：元素的唯一id- name：元素名，大部分情况唯一<figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><br>  <br><br><br>3.2.2 八大元素定位方法<br><br><span class="hljs-bullet">-</span> <span class="hljs-string">```</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">元素定位和操作是自动化测试的核心部分</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">一个元素就像一个人，有自己的特征（属性）</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">webdriver提供了一系列的元素定位方法，常用的有下面几种：</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">id：根据元素id值</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name：根据元素name值</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">class name：根据元素class值</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">tag name：根据元素标签名字</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">link text：根据超链接的文本内容</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">partial link text：根据超链接的部分文本内容</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">xpath：根据xpath</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">css selector：通过css定位</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">xpath定位</span><br></code></pre></td></tr></table></figure></code></pre></li></ul><p>语法</p><p>&#x2F; ：从根节点选取（绝对路径）</p><p>&#x2F;&#x2F; ：从当前节点选取，不考虑节点的位置（相对路径）</p><p>.. ：选取当前节点的父节点 搜索框的上两级父节点： &#x2F;&#x2F;*[@id&#x3D;’kw’]&#x2F;..&#x2F;..</p><p>@ ：选取属性</p><p>举例：</p><p>相对路径： &#x2F;&#x2F;div[@class&#x3D;’entry-sider-panel’]&#x2F;section[@class&#x3D;’entry-sider-panel__bd’]&#x2F;div&#x2F;div[1]</p><p>CSS定位<br>语法<br>#：选取id属性，#kw<br>.：选取class属性<br>[]：选取其他属性，如：[id&#x3D;’xx’]</p><p>:层级选取，如：#form&gt;span&gt;input</p><p>举例：div.entry-sider-panel&gt;section.entry-sider-panel__bd&gt;div&gt;div:nth-child(1)</p><h3 id="3-3-元素操作"><a href="#3-3-元素操作" class="headerlink" title="3.3 元素操作"></a>3.3 元素操作</h3><h4 id="3-3-1-输入内容"><a href="#3-3-1-输入内容" class="headerlink" title="3.3.1 输入内容"></a>3.3.1 输入内容</h4><ul><li>send_keys()</li></ul><h4 id="3-3-2-点击元素"><a href="#3-3-2-点击元素" class="headerlink" title="3.3.2 点击元素"></a>3.3.2 点击元素</h4><ul><li>click()</li></ul><h4 id="3-3-3-清空元素文本内容"><a href="#3-3-3-清空元素文本内容" class="headerlink" title="3.3.3 清空元素文本内容"></a>3.3.3 清空元素文本内容</h4><ul><li>clear()</li></ul><h4 id="3-3-4-获取元素文本"><a href="#3-3-4-获取元素文本" class="headerlink" title="3.3.4 获取元素文本"></a>3.3.4 获取元素文本</h4><ul><li>text</li></ul><p>返回的是字符串</p><h4 id="3-3-5-获取元素尺寸"><a href="#3-3-5-获取元素尺寸" class="headerlink" title="3.3.5 获取元素尺寸"></a>3.3.5 获取元素尺寸</h4><ul><li>size</li></ul><p>返回的是字典</p><h4 id="3-3-6-获取元素的属性值"><a href="#3-3-6-获取元素的属性值" class="headerlink" title="3.3.6 获取元素的属性值"></a>3.3.6 获取元素的属性值</h4><ul><li>get_attribute(‘属性值’) –如id，class</li></ul><h2 id="4、设置等待时间"><a href="#4、设置等待时间" class="headerlink" title="4、设置等待时间"></a>4、设置等待时间</h2><h3 id="4-1-强制等待"><a href="#4-1-强制等待" class="headerlink" title="4.1 强制等待"></a>4.1 强制等待</h3><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">sleep</span></span>()</span><br><br>需要先导包，<span class="hljs-variable">import</span> <span class="hljs-variable">time</span><br></code></pre></td></tr></table></figure><h3 id="4-2-隐式等待"><a href="#4-2-隐式等待" class="headerlink" title="4.2 隐式等待"></a>4.2 隐式等待</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">driver<span class="hljs-selector-class">.implicitly_wait</span>(秒)<br></code></pre></td></tr></table></figure><ul><li>智能等待是在等待周期内一直等待元素是否出现，如果元素出现则继续，元素在等待周期内没有出现则报错</li><li>推荐等待时间：10-30秒</li><li>隐式等待只需设置一次就可以对整个脚本文件生效</li></ul><h3 id="4-3-显式等待"><a href="#4-3-显式等待" class="headerlink" title="4.3 显式等待"></a>4.3 显式等待</h3><p>显式等待使WebdDriver等待某个条件成立时继续执行，否则在达到最大时长时抛出超时异常</p><p>示例代码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.<span class="hljs-keyword">by</span> <span class="hljs-keyword">import</span> <span class="hljs-keyword">By</span><br><span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br><br>driver = webdriver.Chrome()<br>driver.<span class="hljs-keyword">get</span>(&quot;http://www.baidu.com&quot;) # 每隔 <span class="hljs-number">0.5</span>s 检查一次(默认就是 <span class="hljs-number">0.5</span>s), 最多等待 <span class="hljs-number">5</span> 秒<br>element = WebDriverWait(driver, <span class="hljs-number">5</span>, <span class="hljs-number">0.5</span>).<span class="hljs-keyword">until</span>( EC.visibility_of_element_located( (<span class="hljs-keyword">By</span>.ID, &quot;kw&quot;)<br>) )<br>element.send_keys(<span class="hljs-string">&#x27;selenium&#x27;</span>)<br>driver.quit()<br></code></pre></td></tr></table></figure><h2 id="5、滚动条操作、下拉框操作"><a href="#5、滚动条操作、下拉框操作" class="headerlink" title="5、滚动条操作、下拉框操作"></a>5、滚动条操作、下拉框操作</h2><h3 id="5-1-操作滚动条"><a href="#5-1-操作滚动条" class="headerlink" title="5.1 操作滚动条"></a>5.1 操作滚动条</h3><p>注意：操作滚动天是通过js操作的，不是通过selenium操作的</p><p>方法一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">from selenium import webdriver<br><br>from <span class="hljs-keyword">time</span> import <span class="hljs-built_in">sleep</span><br><br>driver = webdriver.Chrome()<br><br>driver.get(<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>)<br><br>driver.set_window_size(688,476)<br><br><span class="hljs-built_in">sleep</span>(1)<br><br>js = <span class="hljs-string">&#x27;window.scrollTo(0,10000)&#x27;</span> <span class="hljs-comment"># 拖动到底部</span><br><br>driver.execute_script(js) <span class="hljs-comment"># 执行js命令</span><br><br><span class="hljs-built_in">sleep</span>(1)<br><br>js2 = <span class="hljs-string">&#x27;window.scrollTo(10000,0)&#x27;</span> <span class="hljs-comment"># 从左拖到右</span><br><br>driver.execute_script(js2)<br><br><span class="hljs-built_in">sleep</span>(1)<br><br>js3 = <span class="hljs-string">&#x27;window.scrollTo(10000,10000)&#x27;</span> <span class="hljs-comment"># 拖到右下角</span><br><br>driver.execute_script(js3)<br><br><span class="hljs-built_in">sleep</span>(2)<br><br>driver.quit()<br></code></pre></td></tr></table></figure><p>方法二（推荐）：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">target = <span class="hljs-variable language_">self</span>.element(<span class="hljs-variable language_">self</span>.locators[<span class="hljs-string">&#x27;product_des&#x27;</span>]) <span class="hljs-comment"># 定位到目标元素</span><br><span class="hljs-variable language_">self</span>._driver.execute_script(<span class="hljs-string">&quot;arguments[0].scrollIntoView();&quot;</span>, target) <span class="hljs-comment"># 滚动条滑动到目标元素</span><br></code></pre></td></tr></table></figure><h3 id="5-2-操作下拉框"><a href="#5-2-操作下拉框" class="headerlink" title="5.2 操作下拉框"></a>5.2 操作下拉框</h3><p>方法一：二次定位，先定位到下拉框，然后通过里面的值进行定位</p><p>方法二：通过select库进行操作</p><p>示例代码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> <span class="hljs-type">time</span> <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium.webdriver.support.<span class="hljs-keyword">select</span> <span class="hljs-keyword">import</span> <span class="hljs-keyword">Select</span><br>driver = webdriver.Chrome()<br><br>driver.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;file:///C:/Users/Eccang/Desktop/test.html&#x27;</span>)<br>sleep(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>方法一</p><p>二次定位</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">m</span> = driver.find_element_by_id(<span class="hljs-string">&#x27;abc&#x27;</span>) <span class="hljs-comment"># 先定位到下拉框</span><br><br>m.find_element_by_xpath(<span class="hljs-string">&quot;//*[<span class="hljs-variable">@value</span>=&#x27;p1&#x27;]&quot;</span>).click() <span class="hljs-comment"># 再定位一次选择里面的选项</span><br></code></pre></td></tr></table></figure><p>方法二</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">Select</span>(m).select_by_index(<span class="hljs-number">1</span>) <span class="hljs-meta"># 根据索引值选择</span><br><span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">Select</span>(m).select_by_value(<span class="hljs-string">&#x27;p2&#x27;</span>) <span class="hljs-meta"># 根据值选择</span><br><span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">Select</span>(m).select_by_visible_text(<span class="hljs-string">&#x27;深圳&#x27;</span>) <span class="hljs-meta"># 根据可见文本选择</span><br></code></pre></td></tr></table></figure><h2 id="6、多窗口处理、弹框处理"><a href="#6、多窗口处理、弹框处理" class="headerlink" title="6、多窗口处理、弹框处理"></a>6、多窗口处理、弹框处理</h2><h3 id="6-1-多窗口处理"><a href="#6-1-多窗口处理" class="headerlink" title="6.1 多窗口处理"></a>6.1 多窗口处理</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lasso">根据窗口的<span class="hljs-keyword">handle</span>值进行切换<br><br>获取当前窗口<span class="hljs-keyword">handle</span>值：driver.current_window_handle<br><br>获取所有窗口<span class="hljs-keyword">handle</span>值：driver.window_handles<br><br>根据<span class="hljs-keyword">handle</span>值切换窗口：driver.switch_to.window(窗口<span class="hljs-keyword">handle</span>值)<br></code></pre></td></tr></table></figure><h3 id="6-2-弹框处理"><a href="#6-2-弹框处理" class="headerlink" title="6.2 弹框处理"></a>6.2 弹框处理</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">点击确定：driver<span class="hljs-selector-class">.switch_to</span><span class="hljs-selector-class">.alert</span><span class="hljs-selector-class">.accept</span>()<br><br>点击取消：driver<span class="hljs-selector-class">.switch_to</span><span class="hljs-selector-class">.alert</span><span class="hljs-selector-class">.dismiss</span>()<br><br>弹框中输入文本：driver<span class="hljs-selector-class">.switch_to</span><span class="hljs-selector-class">.alert</span><span class="hljs-selector-class">.send_keys</span>()<br><br>获取弹框中的文本内容：driver<span class="hljs-selector-class">.switch_to</span><span class="hljs-selector-class">.alert</span>.text<br></code></pre></td></tr></table></figure><h2 id="7、框架切换、文件上传"><a href="#7、框架切换、文件上传" class="headerlink" title="7、框架切换、文件上传"></a>7、框架切换、文件上传</h2><h3 id="7-1-框架切换"><a href="#7-1-框架切换" class="headerlink" title="7.1 框架切换"></a>7.1 框架切换</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">切换框架：driver<span class="hljs-selector-class">.switch_to</span><span class="hljs-selector-class">.frame</span>(id/name)<br><br>返回默认框架：driver<span class="hljs-selector-class">.switch_to</span><span class="hljs-selector-class">.default_content</span>()<br></code></pre></td></tr></table></figure><h3 id="7-2-文件上传"><a href="#7-2-文件上传" class="headerlink" title="7.2 文件上传"></a>7.2 文件上传</h3><p>对于通过input标签实现的上传功能，可以将其看作是一个输入框，即通过 send_keys()指定本地文件路径的方式实现文件上传</p><p>对于非 input 标签实现的上传功能，我们可以通过模拟键盘敲击的方式实现，代码如下：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-built_in">import</span> win32com.client <span class="hljs-comment"># 导入Windows API模块</span><br><br>driver.find_element_by_css_selector(<span class="hljs-string">&quot;#top .icon&quot;</span>).click()<br>s<span class="hljs-attr">h</span> <span class="hljs-operator">=</span> win32com.client.Dispatch(<span class="hljs-string">&quot;WScript.shell&quot;</span>)<br>time.sleep(<span class="hljs-number">3</span>)<br>sh.Sendkeys(<span class="hljs-string">&quot;C:<span class="hljs-char escape_">\\</span>Users<span class="hljs-char escape_">\D</span>ownloads<span class="hljs-char escape_">\f</span>89860fb73c0ba14c9b88845eb10b928.jpeg<span class="hljs-char escape_">\n</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="8、浏览器无头模式"><a href="#8、浏览器无头模式" class="headerlink" title="8、浏览器无头模式"></a>8、浏览器无头模式</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile">chrome_options = Options() <span class="hljs-comment"># 开发者模式，防止被各大网站识别出来用了selenium</span><br>chrome_options.add_argument(&#x27;--headless&#x27;) <span class="hljs-comment"># 添加谷歌无头浏览器模式</span><br><br>driver=webdriver.Chrome(options=chrome_options) <span class="hljs-comment"># 谷歌无头浏览器模式</span><br></code></pre></td></tr></table></figure><h2 id="9、单例模式"><a href="#9、单例模式" class="headerlink" title="9、单例模式"></a>9、单例模式</h2><p>单例模式：单例模式就是确保一个类只有一个实例.当你希望整个系统中,某个类只有一个实例时,单例模式就派上了用场</p><p>由于在做web UI测试的时候需要浏览器对象，在实际写脚本的过程中可能会遇到只要调用一次webdriver就会生成一个浏览器对象，此时我们可以用到单例模式来处理（或者自己写一个判断语句也是可以处理的）。具体实现代码如下：</p><p>后续有时间会补充一些写自动化测试用例过程中需要用到的分层思想，已经一些测试用例、脚本关联、数据处理方面的东西。</p>]]></content>
    
    
    
    <tags>
      
      <tag>测试开发学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
